
StorageMonitoringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a8  080057a8  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  080057a8  080057a8  000067a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b0  080057b0  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b0  080057b0  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080057b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000070  08005828  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005828  000072e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010359  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e7  00000000  00000000  000173f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  000196e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc4  00000000  00000000  0001a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d0d  00000000  00000000  0001b3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c80  00000000  00000000  000320d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090222  00000000  00000000  00044d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  000d4fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d9ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055f8 	.word	0x080055f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080055f8 	.word	0x080055f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800058a:	4a38      	ldr	r2, [pc, #224]	@ (800066c <HD44780_Init+0xec>)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000590:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <HD44780_Init+0xf0>)
 8000592:	2208      	movs	r2, #8
 8000594:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <HD44780_Init+0xf4>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800059c:	4b33      	ldr	r3, [pc, #204]	@ (800066c <HD44780_Init+0xec>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d907      	bls.n	80005b4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005a4:	4b33      	ldr	r3, [pc, #204]	@ (8000674 <HD44780_Init+0xf4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <HD44780_Init+0xf4>)
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e006      	b.n	80005c2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000674 <HD44780_Init+0xf4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b2d      	ldr	r3, [pc, #180]	@ (8000674 <HD44780_Init+0xf4>)
 80005c0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005c2:	f000 f985 	bl	80008d0 <DelayInit>
  HAL_Delay(50);
 80005c6:	2032      	movs	r0, #50	@ 0x32
 80005c8:	f000 fefa 	bl	80013c0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <HD44780_Init+0xf0>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f943 	bl	800085c <ExpanderWrite>
  HAL_Delay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005da:	f000 fef1 	bl	80013c0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005de:	2030      	movs	r0, #48	@ 0x30
 80005e0:	f000 f92b 	bl	800083a <Write4Bits>
  DelayUS(4500);
 80005e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005e8:	f000 f99c 	bl	8000924 <DelayUS>

  Write4Bits(0x03 << 4);
 80005ec:	2030      	movs	r0, #48	@ 0x30
 80005ee:	f000 f924 	bl	800083a <Write4Bits>
  DelayUS(4500);
 80005f2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80005f6:	f000 f995 	bl	8000924 <DelayUS>

  Write4Bits(0x03 << 4);
 80005fa:	2030      	movs	r0, #48	@ 0x30
 80005fc:	f000 f91d 	bl	800083a <Write4Bits>
  DelayUS(4500);
 8000600:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000604:	f000 f98e 	bl	8000924 <DelayUS>

  Write4Bits(0x02 << 4);
 8000608:	2020      	movs	r0, #32
 800060a:	f000 f916 	bl	800083a <Write4Bits>
  DelayUS(100);
 800060e:	2064      	movs	r0, #100	@ 0x64
 8000610:	f000 f988 	bl	8000924 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <HD44780_Init+0xf4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f8ce 	bl	80007c0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <HD44780_Init+0xf8>)
 8000626:	2204      	movs	r2, #4
 8000628:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800062a:	f000 f875 	bl	8000718 <HD44780_Display>
  HD44780_Clear();
 800062e:	f000 f82b 	bl	8000688 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <HD44780_Init+0xfc>)
 8000634:	2202      	movs	r2, #2
 8000636:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <HD44780_Init+0xfc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8bc 	bl	80007c0 <SendCommand>
  DelayUS(4500);
 8000648:	f241 1094 	movw	r0, #4500	@ 0x1194
 800064c:	f000 f96a 	bl	8000924 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000650:	490b      	ldr	r1, [pc, #44]	@ (8000680 <HD44780_Init+0x100>)
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f876 	bl	8000744 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000658:	490a      	ldr	r1, [pc, #40]	@ (8000684 <HD44780_Init+0x104>)
 800065a:	2001      	movs	r0, #1
 800065c:	f000 f872 	bl	8000744 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000660:	f000 f81d 	bl	800069e <HD44780_Home>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000008f 	.word	0x2000008f
 8000670:	20000090 	.word	0x20000090
 8000674:	2000008c 	.word	0x2000008c
 8000678:	2000008d 	.word	0x2000008d
 800067c:	2000008e 	.word	0x2000008e
 8000680:	20000000 	.word	0x20000000
 8000684:	20000008 	.word	0x20000008

08000688 <HD44780_Clear>:

void HD44780_Clear()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f897 	bl	80007c0 <SendCommand>
  DelayUS(2000);
 8000692:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000696:	f000 f945 	bl	8000924 <DelayUS>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <HD44780_Home>:

void HD44780_Home()
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006a2:	2002      	movs	r0, #2
 80006a4:	f000 f88c 	bl	80007c0 <SendCommand>
  DelayUS(2000);
 80006a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006ac:	f000 f93a 	bl	8000924 <DelayUS>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HD44780_SetCursor+0x5c>)
 80006c6:	f107 0408 	add.w	r4, r7, #8
 80006ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006d0:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <HD44780_SetCursor+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	79ba      	ldrb	r2, [r7, #6]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d303      	bcc.n	80006e2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <HD44780_SetCursor+0x60>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	3318      	adds	r3, #24
 80006e8:	443b      	add	r3, r7
 80006ea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4413      	add	r3, r2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f85d 	bl	80007c0 <SendCommand>
}
 8000706:	bf00      	nop
 8000708:	371c      	adds	r7, #28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	bf00      	nop
 8000710:	08005610 	.word	0x08005610
 8000714:	2000008f 	.word	0x2000008f

08000718 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <HD44780_Display+0x28>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HD44780_Display+0x28>)
 8000728:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <HD44780_Display+0x28>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f843 	bl	80007c0 <SendCommand>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000008d 	.word	0x2000008d

08000744 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	b25b      	sxtb	r3, r3
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	b25b      	sxtb	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f82a 	bl	80007c0 <SendCommand>
  for (int i=0; i<8; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	e009      	b.n	8000786 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f82e 	bl	80007dc <SendChar>
  for (int i=0; i<8; i++)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2b07      	cmp	r3, #7
 800078a:	ddf2      	ble.n	8000772 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800079e:	e006      	b.n	80007ae <HD44780_PrintStr+0x18>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f817 	bl	80007dc <SendChar>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f4      	bne.n	80007a0 <HD44780_PrintStr+0xa>
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f812 	bl	80007f8 <Send>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SendChar>:

static void SendChar(uint8_t ch)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f804 	bl	80007f8 <Send>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f023 030f 	bic.w	r3, r3, #15
 800080e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000816:	7bfa      	ldrb	r2, [r7, #15]
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	4313      	orrs	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f80b 	bl	800083a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000824:	7bba      	ldrb	r2, [r7, #14]
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	4313      	orrs	r3, r2
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f804 	bl	800083a <Write4Bits>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f808 	bl	800085c <ExpanderWrite>
  PulseEnable(value);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f820 	bl	8000894 <PulseEnable>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af02      	add	r7, sp, #8
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <ExpanderWrite+0x30>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4313      	orrs	r3, r2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000872:	f107 020f 	add.w	r2, r7, #15
 8000876:	230a      	movs	r3, #10
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	214e      	movs	r1, #78	@ 0x4e
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <ExpanderWrite+0x34>)
 8000880:	f001 fa62 	bl	8001d48 <HAL_I2C_Master_Transmit>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000090 	.word	0x20000090
 8000890:	20000094 	.word	0x20000094

08000894 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffd8 	bl	800085c <ExpanderWrite>
  DelayUS(20);
 80008ac:	2014      	movs	r0, #20
 80008ae:	f000 f839 	bl	8000924 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f023 0304 	bic.w	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffce 	bl	800085c <ExpanderWrite>
  DelayUS(20);
 80008c0:	2014      	movs	r0, #20
 80008c2:	f000 f82f 	bl	8000924 <DelayUS>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <DelayInit>:

static void DelayInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008d4:	4b11      	ldr	r3, [pc, #68]	@ (800091c <DelayInit+0x4c>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	4a10      	ldr	r2, [pc, #64]	@ (800091c <DelayInit+0x4c>)
 80008da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008de:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <DelayInit+0x4c>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <DelayInit+0x4c>)
 80008e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008ea:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <DelayInit+0x50>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <DelayInit+0x50>)
 80008f2:	f023 0301 	bic.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <DelayInit+0x50>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <DelayInit+0x50>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <DelayInit+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800090a:	bf00      	nop
  __ASM volatile ("NOP");
 800090c:	bf00      	nop
  __ASM volatile ("NOP");
 800090e:	bf00      	nop
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000edf0 	.word	0xe000edf0
 8000920:	e0001000 	.word	0xe0001000

08000924 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <DelayUS+0x44>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <DelayUS+0x48>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9a      	lsrs	r2, r3, #18
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <DelayUS+0x4c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <DelayUS+0x4c>)
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8f6      	bhi.n	8000946 <DelayUS+0x22>
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	371c      	adds	r7, #28
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000014 	.word	0x20000014
 800096c:	431bde83 	.word	0x431bde83
 8000970:	e0001000 	.word	0xe0001000

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fcb0 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f81c 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 f952 	bl	8000c28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000984:	f000 f926 	bl	8000bd4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000988:	f000 f8b0 	bl	8000aec <MX_TIM2_Init>
  MX_I2C1_Init();
 800098c:	f000 f880 	bl	8000a90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fdf5 	bl	8000580 <HD44780_Init>

  HAL_UART_Receive_IT(&huart2, &temperature, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	4905      	ldr	r1, [pc, #20]	@ (80009b0 <main+0x3c>)
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <main+0x40>)
 800099c:	f003 f92d 	bl	8003bfa <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UpdateBuzzer();
 80009a0:	f000 f9fc 	bl	8000d9c <UpdateBuzzer>
	  HAL_Delay(10);
 80009a4:	200a      	movs	r0, #10
 80009a6:	f000 fd0b 	bl	80013c0 <HAL_Delay>
  {
 80009aa:	bf00      	nop
 80009ac:	e7f8      	b.n	80009a0 <main+0x2c>
 80009ae:	bf00      	nop
 80009b0:	20000185 	.word	0x20000185
 80009b4:	20000130 	.word	0x20000130

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	@ 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2230      	movs	r2, #48	@ 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 f996 	bl	8004cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ec:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <SystemClock_Config+0xd4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <SystemClock_Config+0xd4>)
 8000a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <SystemClock_Config+0xd4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a36:	2304      	movs	r3, #4
 8000a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fcda 	bl	80023fc <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a4e:	f000 fa7b 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 ff3c 	bl	80028ec <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a7a:	f000 fa65 	bl	8000f48 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	@ 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <MX_I2C1_Init+0x54>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000a9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <MX_I2C1_Init+0x58>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ab2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ace:	f000 fff7 	bl	8001ac0 <HAL_I2C_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad8:	f000 fa36 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000094 	.word	0x20000094
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	000186a0 	.word	0x000186a0

08000aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b26:	227f      	movs	r2, #127	@ 0x7f
 8000b28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000b30:	4b27      	ldr	r3, [pc, #156]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b32:	2214      	movs	r2, #20
 8000b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b42:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b44:	f002 f8f2 	bl	8002d2c <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b4e:	f000 f9fb 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481c      	ldr	r0, [pc, #112]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b60:	f002 fb62 	bl	8003228 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b6a:	f000 f9ed 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6e:	4818      	ldr	r0, [pc, #96]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b70:	f002 f92b 	bl	8002dca <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b7a:	f000 f9e5 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000b8e:	f002 feeb 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b98:	f000 f9d6 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	@ 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000bb4:	f002 fa76 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000bbe:	f000 f9c3 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc2:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <MX_TIM2_Init+0xe4>)
 8000bc4:	f000 fa56 	bl	8001074 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000e8 	.word	0x200000e8

08000bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <MX_USART2_UART_Init+0x50>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f002 ff1a 	bl	8003a44 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c16:	f000 f997 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000130 	.word	0x20000130
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a40      	ldr	r2, [pc, #256]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a39      	ldr	r2, [pc, #228]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b37      	ldr	r3, [pc, #220]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a32      	ldr	r2, [pc, #200]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <MX_GPIO_Init+0x120>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f240 21a1 	movw	r1, #673	@ 0x2a1
 8000cb4:	4825      	ldr	r0, [pc, #148]	@ (8000d4c <MX_GPIO_Init+0x124>)
 8000cb6:	f000 fecf 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2171      	movs	r1, #113	@ 0x71
 8000cbe:	4824      	ldr	r0, [pc, #144]	@ (8000d50 <MX_GPIO_Init+0x128>)
 8000cc0:	f000 feca 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2180      	movs	r1, #128	@ 0x80
 8000cc8:	4822      	ldr	r0, [pc, #136]	@ (8000d54 <MX_GPIO_Init+0x12c>)
 8000cca:	f000 fec5 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481b      	ldr	r0, [pc, #108]	@ (8000d54 <MX_GPIO_Init+0x12c>)
 8000ce6:	f000 fd33 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 8000cea:	f240 23a1 	movw	r3, #673	@ 0x2a1
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <MX_GPIO_Init+0x124>)
 8000d04:	f000 fd24 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d08:	2371      	movs	r3, #113	@ 0x71
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <MX_GPIO_Init+0x128>)
 8000d20:	f000 fd16 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <MX_GPIO_Init+0x12c>)
 8000d3c:	f000 fd08 	bl	8001750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	@ 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40020800 	.word	0x40020800

08000d58 <ActivateLED>:

/* USER CODE BEGIN 4 */
void ActivateLED(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <ActivateLED+0x10>)
 8000d60:	f000 fe93 	bl	8001a8a <HAL_GPIO_TogglePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40020000 	.word	0x40020000

08000d6c <ActivateBuzzer>:
} BuzzerState;

BuzzerState buzzerState = BUZZER_OFF;
int pwmStep = 10;

void ActivateBuzzer(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    if (buzzerState == BUZZER_OFF) {
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <ActivateBuzzer+0x24>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <ActivateBuzzer+0x20>
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <ActivateBuzzer+0x28>)
 8000d7c:	f002 f87e 	bl	8002e7c <HAL_TIM_PWM_Start>
        pwmStep = 10;
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <ActivateBuzzer+0x2c>)
 8000d82:	220a      	movs	r2, #10
 8000d84:	601a      	str	r2, [r3, #0]
        buzzerState = BUZZER_ACTIVE;
 8000d86:	4b02      	ldr	r3, [pc, #8]	@ (8000d90 <ActivateBuzzer+0x24>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
    }
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000186 	.word	0x20000186
 8000d94:	200000e8 	.word	0x200000e8
 8000d98:	20000010 	.word	0x20000010

08000d9c <UpdateBuzzer>:

void UpdateBuzzer(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    if (buzzerState == BUZZER_ACTIVE) {
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <UpdateBuzzer+0x64>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d129      	bne.n	8000dfc <UpdateBuzzer+0x60>
        __HAL_TIM_SET_AUTORELOAD(&htim2, pwmStep * 2);
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <UpdateBuzzer+0x68>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	005a      	lsls	r2, r3, #1
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <UpdateBuzzer+0x6c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <UpdateBuzzer+0x68>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <UpdateBuzzer+0x6c>)
 8000dbe:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmStep);
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <UpdateBuzzer+0x68>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <UpdateBuzzer+0x6c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <UpdateBuzzer+0x6c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24

        pwmStep++;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <UpdateBuzzer+0x68>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <UpdateBuzzer+0x68>)
 8000dda:	6013      	str	r3, [r2, #0]
        if (pwmStep >= 60) {
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <UpdateBuzzer+0x68>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b3b      	cmp	r3, #59	@ 0x3b
 8000de2:	dd0b      	ble.n	8000dfc <UpdateBuzzer+0x60>
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000de4:	2104      	movs	r1, #4
 8000de6:	4808      	ldr	r0, [pc, #32]	@ (8000e08 <UpdateBuzzer+0x6c>)
 8000de8:	f002 f8f8 	bl	8002fdc <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <UpdateBuzzer+0x70>)
 8000df2:	f000 fe31 	bl	8001a58 <HAL_GPIO_WritePin>
            buzzerState = BUZZER_DONE;
 8000df6:	4b02      	ldr	r3, [pc, #8]	@ (8000e00 <UpdateBuzzer+0x64>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000186 	.word	0x20000186
 8000e04:	20000010 	.word	0x20000010
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	40020400 	.word	0x40020400

08000e10 <HAL_UART_RxCpltCallback>:

char snum[5];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b092      	sub	sp, #72	@ 0x48
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

  if (huart->Instance == USART2){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f1c <HAL_UART_RxCpltCallback+0x10c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d178      	bne.n	8000f14 <HAL_UART_RxCpltCallback+0x104>
      if (received_char == '\r' || received_char == '\n'){
 8000e22:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <HAL_UART_RxCpltCallback+0x110>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b0d      	cmp	r3, #13
 8000e28:	d003      	beq.n	8000e32 <HAL_UART_RxCpltCallback+0x22>
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f20 <HAL_UART_RxCpltCallback+0x110>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b0a      	cmp	r3, #10
 8000e30:	d15c      	bne.n	8000eec <HAL_UART_RxCpltCallback+0xdc>
          rx_data[rx_index] = '\0';
 8000e32:	4b3c      	ldr	r3, [pc, #240]	@ (8000f24 <HAL_UART_RxCpltCallback+0x114>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b3b      	ldr	r3, [pc, #236]	@ (8000f28 <HAL_UART_RxCpltCallback+0x118>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	5499      	strb	r1, [r3, r2]
          int received_number = atoi((char*)rx_data);
 8000e3e:	483a      	ldr	r0, [pc, #232]	@ (8000f28 <HAL_UART_RxCpltCallback+0x118>)
 8000e40:	f003 fe56 	bl	8004af0 <atoi>
 8000e44:	6478      	str	r0, [r7, #68]	@ 0x44
          int num = received_number;
 8000e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e48:	643b      	str	r3, [r7, #64]	@ 0x40
          num = itoa(num, snum, 10);
 8000e4a:	220a      	movs	r2, #10
 8000e4c:	4937      	ldr	r1, [pc, #220]	@ (8000f2c <HAL_UART_RxCpltCallback+0x11c>)
 8000e4e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000e50:	f003 fe6a 	bl	8004b28 <itoa>
 8000e54:	4603      	mov	r3, r0
 8000e56:	643b      	str	r3, [r7, #64]	@ 0x40
          HD44780_Clear();
 8000e58:	f7ff fc16 	bl	8000688 <HD44780_Clear>
          HD44780_SetCursor(0,0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fc28 	bl	80006b4 <HD44780_SetCursor>
          HD44780_PrintStr(snum);
 8000e64:	4831      	ldr	r0, [pc, #196]	@ (8000f2c <HAL_UART_RxCpltCallback+0x11c>)
 8000e66:	f7ff fc96 	bl	8000796 <HD44780_PrintStr>
          char debug_msg[50];
          sprintf(debug_msg, "You entered: %d\r\n", received_number);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e70:	492f      	ldr	r1, [pc, #188]	@ (8000f30 <HAL_UART_RxCpltCallback+0x120>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 ff20 	bl	8004cb8 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff f9af 	bl	80001e0 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f107 010c 	add.w	r1, r7, #12
 8000e8a:	2364      	movs	r3, #100	@ 0x64
 8000e8c:	4829      	ldr	r0, [pc, #164]	@ (8000f34 <HAL_UART_RxCpltCallback+0x124>)
 8000e8e:	f002 fe29 	bl	8003ae4 <HAL_UART_Transmit>
          if (received_number > THRESHOLD){
 8000e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	dd0b      	ble.n	8000eb0 <HAL_UART_RxCpltCallback+0xa0>
              if (led_buzzer_state == 0){
 8000e98:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <HAL_UART_RxCpltCallback+0x128>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d11c      	bne.n	8000eda <HAL_UART_RxCpltCallback+0xca>
                  ActivateLED();
 8000ea0:	f7ff ff5a 	bl	8000d58 <ActivateLED>
                  ActivateBuzzer();
 8000ea4:	f7ff ff62 	bl	8000d6c <ActivateBuzzer>
                  led_buzzer_state = 1;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_UART_RxCpltCallback+0x128>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e014      	b.n	8000eda <HAL_UART_RxCpltCallback+0xca>
              }
          } else{
              if (led_buzzer_state == 1){
 8000eb0:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <HAL_UART_RxCpltCallback+0x128>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d110      	bne.n	8000eda <HAL_UART_RxCpltCallback+0xca>
                  ActivateLED();
 8000eb8:	f7ff ff4e 	bl	8000d58 <ActivateLED>
                  buzzerState = BUZZER_OFF;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <HAL_UART_RxCpltCallback+0x12c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
                  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	481e      	ldr	r0, [pc, #120]	@ (8000f40 <HAL_UART_RxCpltCallback+0x130>)
 8000ec6:	f002 f889 	bl	8002fdc <HAL_TIM_PWM_Stop>
                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2101      	movs	r1, #1
 8000ece:	481d      	ldr	r0, [pc, #116]	@ (8000f44 <HAL_UART_RxCpltCallback+0x134>)
 8000ed0:	f000 fdc2 	bl	8001a58 <HAL_GPIO_WritePin>
                  led_buzzer_state = 0;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_UART_RxCpltCallback+0x128>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
              }
          }
          memset(rx_data, 0, BUFFER_SIZE);
 8000eda:	220a      	movs	r2, #10
 8000edc:	2100      	movs	r1, #0
 8000ede:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <HAL_UART_RxCpltCallback+0x118>)
 8000ee0:	f003 ff0a 	bl	8004cf8 <memset>
          rx_index = 0;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <HAL_UART_RxCpltCallback+0x114>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
      if (received_char == '\r' || received_char == '\n'){
 8000eea:	e00e      	b.n	8000f0a <HAL_UART_RxCpltCallback+0xfa>
      } else{
          if (rx_index < BUFFER_SIZE - 1){
 8000eec:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_UART_RxCpltCallback+0x114>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_UART_RxCpltCallback+0xfa>
              rx_data[rx_index++] = received_char;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_UART_RxCpltCallback+0x114>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	b2d1      	uxtb	r1, r2
 8000efc:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <HAL_UART_RxCpltCallback+0x114>)
 8000efe:	7011      	strb	r1, [r2, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <HAL_UART_RxCpltCallback+0x110>)
 8000f04:	7819      	ldrb	r1, [r3, #0]
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_UART_RxCpltCallback+0x118>)
 8000f08:	5499      	strb	r1, [r3, r2]
          }
      }
      HAL_UART_Receive_IT(&huart2, &received_char, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4904      	ldr	r1, [pc, #16]	@ (8000f20 <HAL_UART_RxCpltCallback+0x110>)
 8000f0e:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <HAL_UART_RxCpltCallback+0x124>)
 8000f10:	f002 fe73 	bl	8003bfa <HAL_UART_Receive_IT>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3748      	adds	r7, #72	@ 0x48
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	20000183 	.word	0x20000183
 8000f24:	20000182 	.word	0x20000182
 8000f28:	20000178 	.word	0x20000178
 8000f2c:	20000188 	.word	0x20000188
 8000f30:	08005620 	.word	0x08005620
 8000f34:	20000130 	.word	0x20000130
 8000f38:	20000184 	.word	0x20000184
 8000f3c:	20000186 	.word	0x20000186
 8000f40:	200000e8 	.word	0x200000e8
 8000f44:	40020400 	.word	0x40020400

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <Error_Handler+0x8>

08000f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f92:	2007      	movs	r0, #7
 8000f94:	f000 fb08 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	@ (8001028 <HAL_I2C_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12c      	bne.n	8001020 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe8:	2312      	movs	r3, #18
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480c      	ldr	r0, [pc, #48]	@ (8001030 <HAL_I2C_MspInit+0x8c>)
 8001000:	f000 fba6 	bl	8001750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_I2C_MspInit+0x88>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <HAL_I2C_MspInit+0x88>)
 800100e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	@ 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40005400 	.word	0x40005400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001044:	d10d      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_Base_MspInit+0x3c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_TIM_Base_MspInit+0x3c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_TIM_Base_MspInit+0x3c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001094:	d11d      	bne.n	80010d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <HAL_TIM_MspPostInit+0x68>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <HAL_TIM_MspPostInit+0x68>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <HAL_TIM_MspPostInit+0x68>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010b2:	2302      	movs	r3, #2
 80010b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <HAL_TIM_MspPostInit+0x6c>)
 80010ce:	f000 fb3f 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1d      	ldr	r2, [pc, #116]	@ (8001178 <HAL_UART_MspInit+0x94>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d133      	bne.n	800116e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <HAL_UART_MspInit+0x98>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <HAL_UART_MspInit+0x98>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <HAL_UART_MspInit+0x98>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_UART_MspInit+0x98>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a14      	ldr	r2, [pc, #80]	@ (800117c <HAL_UART_MspInit+0x98>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_UART_MspInit+0x98>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800113e:	230c      	movs	r3, #12
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_UART_MspInit+0x9c>)
 800115a:	f000 faf9 	bl	8001750 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2026      	movs	r0, #38	@ 0x26
 8001164:	f000 fa2b 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001168:	2026      	movs	r0, #38	@ 0x26
 800116a:	f000 fa44 	bl	80015f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40004400 	.word	0x40004400
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f8d1 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <USART2_IRQHandler+0x10>)
 80011ea:	f002 fd2b 	bl	8003c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000130 	.word	0x20000130

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f003 fd6e 	bl	8004d08 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20018000 	.word	0x20018000
 8001258:	00000400 	.word	0x00000400
 800125c:	20000190 	.word	0x20000190
 8001260:	200002e0 	.word	0x200002e0

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800128c:	f7ff ffea 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f003 fd2d 	bl	8004d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fb5b 	bl	8000974 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012cc:	080057b8 	.word	0x080057b8
  ldr r2, =_sbss
 80012d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012d4:	200002e0 	.word	0x200002e0

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f94f 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fe20 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f967 	bl	8001612 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f92f 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	@ (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000014 	.word	0x20000014
 8001378:	2000001c 	.word	0x2000001c
 800137c:	20000018 	.word	0x20000018

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2000001c 	.word	0x2000001c
 80013a4:	20000194 	.word	0x20000194

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000194 	.word	0x20000194

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000001c 	.word	0x2000001c

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	@ (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	@ (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff3e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff31 	bl	800146c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff feb6 	bl	80013a8 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d008      	beq.n	800165c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2280      	movs	r2, #128	@ 0x80
 800164e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e052      	b.n	8001702 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0216 	bic.w	r2, r2, #22
 800166a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800167a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <HAL_DMA_Abort+0x62>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0208 	bic.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ac:	e013      	b.n	80016d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ae:	f7ff fe7b 	bl	80013a8 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d90c      	bls.n	80016d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e015      	b.n	8001702 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e4      	bne.n	80016ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e8:	223f      	movs	r2, #63	@ 0x3f
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d004      	beq.n	8001728 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e00c      	b.n	8001742 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2205      	movs	r2, #5
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e159      	b.n	8001a20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8148 	bne.w	8001a1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a2 	beq.w	8001a1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a56      	ldr	r2, [pc, #344]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b54      	ldr	r3, [pc, #336]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a52      	ldr	r2, [pc, #328]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <HAL_GPIO_Init+0x2f0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x202>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2f4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x1fe>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_GPIO_Init+0x2f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x1fa>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_GPIO_Init+0x2fc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x1f6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_GPIO_Init+0x300>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x1f2>
 800193e:	2304      	movs	r3, #4
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001942:	2307      	movs	r3, #7
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a2f      	ldr	r2, [pc, #188]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a14:	4a0f      	ldr	r2, [pc, #60]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f aea2 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	400b      	ands	r3, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e12b      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fa5c 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	@ 0x24
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b24:	f001 f8da 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8001b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a81      	ldr	r2, [pc, #516]	@ (8001d34 <HAL_I2C_Init+0x274>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d807      	bhi.n	8001b44 <HAL_I2C_Init+0x84>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a80      	ldr	r2, [pc, #512]	@ (8001d38 <HAL_I2C_Init+0x278>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bf94      	ite	ls
 8001b3c:	2301      	movls	r3, #1
 8001b3e:	2300      	movhi	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e006      	b.n	8001b52 <HAL_I2C_Init+0x92>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4a7d      	ldr	r2, [pc, #500]	@ (8001d3c <HAL_I2C_Init+0x27c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf94      	ite	ls
 8001b4c:	2301      	movls	r3, #1
 8001b4e:	2300      	movhi	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0e7      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a78      	ldr	r2, [pc, #480]	@ (8001d40 <HAL_I2C_Init+0x280>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0c9b      	lsrs	r3, r3, #18
 8001b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	@ (8001d34 <HAL_I2C_Init+0x274>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d802      	bhi.n	8001b94 <HAL_I2C_Init+0xd4>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	e009      	b.n	8001ba8 <HAL_I2C_Init+0xe8>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a69      	ldr	r2, [pc, #420]	@ (8001d44 <HAL_I2C_Init+0x284>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	495c      	ldr	r1, [pc, #368]	@ (8001d34 <HAL_I2C_Init+0x274>)
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d819      	bhi.n	8001bfc <HAL_I2C_Init+0x13c>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e59      	subs	r1, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bdc:	400b      	ands	r3, r1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_I2C_Init+0x138>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1e59      	subs	r1, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf6:	e051      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e04f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <HAL_I2C_Init+0x168>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e012      	b.n	8001c4e <HAL_I2C_Init+0x18e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e58      	subs	r0, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	0099      	lsls	r1, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Init+0x196>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e022      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <HAL_I2C_Init+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e58      	subs	r0, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6859      	ldr	r1, [r3, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	440b      	add	r3, r1
 8001c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c7a:	e00f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	6809      	ldr	r1, [r1, #0]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6911      	ldr	r1, [r2, #16]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	000186a0 	.word	0x000186a0
 8001d38:	001e847f 	.word	0x001e847f
 8001d3c:	003d08ff 	.word	0x003d08ff
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	10624dd3 	.word	0x10624dd3

08001d48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	461a      	mov	r2, r3
 8001d54:	460b      	mov	r3, r1
 8001d56:	817b      	strh	r3, [r7, #10]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff fb24 	bl	80013a8 <HAL_GetTick>
 8001d60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	f040 80e0 	bne.w	8001f30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2319      	movs	r3, #25
 8001d76:	2201      	movs	r2, #1
 8001d78:	4970      	ldr	r1, [pc, #448]	@ (8001f3c <HAL_I2C_Master_Transmit+0x1f4>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f964 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0d3      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_I2C_Master_Transmit+0x50>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0cc      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d007      	beq.n	8001dbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2221      	movs	r2, #33	@ 0x21
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	893a      	ldrh	r2, [r7, #8]
 8001dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a50      	ldr	r2, [pc, #320]	@ (8001f40 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e00:	8979      	ldrh	r1, [r7, #10]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f89c 	bl	8001f44 <I2C_MasterRequestWrite>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e08d      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e2c:	e066      	b.n	8001efc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	6a39      	ldr	r1, [r7, #32]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fa22 	bl	800227c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d107      	bne.n	8001e56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d11b      	bne.n	8001ed0 <HAL_I2C_Master_Transmit+0x188>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d017      	beq.n	8001ed0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	6a39      	ldr	r1, [r7, #32]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fa19 	bl	800230c <I2C_WaitOnBTFFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00d      	beq.n	8001efc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d107      	bne.n	8001ef8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e01a      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d194      	bne.n	8001e2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	00100002 	.word	0x00100002
 8001f40:	ffff0000 	.word	0xffff0000

08001f44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	460b      	mov	r3, r1
 8001f52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d006      	beq.n	8001f6e <I2C_MasterRequestWrite+0x2a>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d003      	beq.n	8001f6e <I2C_MasterRequestWrite+0x2a>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f6c:	d108      	bne.n	8001f80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e00b      	b.n	8001f98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	2b12      	cmp	r3, #18
 8001f86:	d107      	bne.n	8001f98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f84f 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00d      	beq.n	8001fcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fbe:	d103      	bne.n	8001fc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e035      	b.n	8002038 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fd4:	d108      	bne.n	8001fe8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fd6:	897b      	ldrh	r3, [r7, #10]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	e01b      	b.n	8002020 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fe8:	897b      	ldrh	r3, [r7, #10]
 8001fea:	11db      	asrs	r3, r3, #7
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f003 0306 	and.w	r3, r3, #6
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f063 030f 	orn	r3, r3, #15
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	490e      	ldr	r1, [pc, #56]	@ (8002040 <I2C_MasterRequestWrite+0xfc>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f898 	bl	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e010      	b.n	8002038 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002016:	897b      	ldrh	r3, [r7, #10]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4907      	ldr	r1, [pc, #28]	@ (8002044 <I2C_MasterRequestWrite+0x100>)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f888 	bl	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	00010008 	.word	0x00010008
 8002044:	00010002 	.word	0x00010002

08002048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002058:	e048      	b.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d044      	beq.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7ff f9a1 	bl	80013a8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d139      	bne.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	0c1b      	lsrs	r3, r3, #16
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10d      	bne.n	800209e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	43da      	mvns	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	e00c      	b.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	43da      	mvns	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d116      	bne.n	80020ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e023      	b.n	8002134 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10d      	bne.n	8002112 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	e00c      	b.n	800212c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	43da      	mvns	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4013      	ands	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	429a      	cmp	r2, r3
 8002130:	d093      	beq.n	800205a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800214a:	e071      	b.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d123      	bne.n	80021a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f043 0204 	orr.w	r2, r3, #4
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e067      	b.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d041      	beq.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7ff f8fc 	bl	80013a8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d136      	bne.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10c      	bne.n	80021e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf14      	ite	ne
 80021de:	2301      	movne	r3, #1
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e00b      	b.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4013      	ands	r3, r2
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e021      	b.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10c      	bne.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	43da      	mvns	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e00b      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f af6d 	bne.w	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002288:	e034      	b.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f886 	bl	800239c <I2C_IsAcknowledgeFailed>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e034      	b.n	8002304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d028      	beq.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7ff f881 	bl	80013a8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11d      	bne.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c2:	2b80      	cmp	r3, #128	@ 0x80
 80022c4:	d016      	beq.n	80022f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e007      	b.n	8002304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fe:	2b80      	cmp	r3, #128	@ 0x80
 8002300:	d1c3      	bne.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002318:	e034      	b.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f83e 	bl	800239c <I2C_IsAcknowledgeFailed>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e034      	b.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d028      	beq.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7ff f839 	bl	80013a8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11d      	bne.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d016      	beq.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e007      	b.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d1c3      	bne.n	800231a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b2:	d11b      	bne.n	80023ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f043 0204 	orr.w	r2, r3, #4
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e267      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d075      	beq.n	8002506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800241a:	4b88      	ldr	r3, [pc, #544]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d00c      	beq.n	8002440 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4b85      	ldr	r3, [pc, #532]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800242e:	2b08      	cmp	r3, #8
 8002430:	d112      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4b82      	ldr	r3, [pc, #520]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800243e:	d10b      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	4b7e      	ldr	r3, [pc, #504]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05b      	beq.n	8002504 <HAL_RCC_OscConfig+0x108>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d157      	bne.n	8002504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e242      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x74>
 8002462:	4b76      	ldr	r3, [pc, #472]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a75      	ldr	r2, [pc, #468]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x98>
 800247a:	4b70      	ldr	r3, [pc, #448]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6f      	ldr	r2, [pc, #444]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b6d      	ldr	r3, [pc, #436]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6c      	ldr	r2, [pc, #432]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002494:	4b69      	ldr	r3, [pc, #420]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a68      	ldr	r2, [pc, #416]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b66      	ldr	r3, [pc, #408]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a65      	ldr	r2, [pc, #404]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe ff78 	bl	80013a8 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe ff74 	bl	80013a8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e207      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b5b      	ldr	r3, [pc, #364]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xc0>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe ff64 	bl	80013a8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe ff60 	bl	80013a8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	@ 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1f3      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b51      	ldr	r3, [pc, #324]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0xe8>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002512:	4b4a      	ldr	r3, [pc, #296]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b47      	ldr	r3, [pc, #284]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002526:	2b08      	cmp	r3, #8
 8002528:	d11c      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b44      	ldr	r3, [pc, #272]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	4b41      	ldr	r3, [pc, #260]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1c7      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b3b      	ldr	r3, [pc, #236]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4937      	ldr	r1, [pc, #220]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e03a      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b34      	ldr	r3, [pc, #208]	@ (8002640 <HAL_RCC_OscConfig+0x244>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe ff19 	bl	80013a8 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe ff15 	bl	80013a8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1a8      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b28      	ldr	r3, [pc, #160]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4925      	ldr	r1, [pc, #148]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b24      	ldr	r3, [pc, #144]	@ (8002640 <HAL_RCC_OscConfig+0x244>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fef8 	bl	80013a8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fef4 	bl	80013a8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e187      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d036      	beq.n	8002654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <HAL_RCC_OscConfig+0x248>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fed8 	bl	80013a8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe fed4 	bl	80013a8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e167      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_OscConfig+0x240>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x200>
 800261a:	e01b      	b.n	8002654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_OscConfig+0x248>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe fec1 	bl	80013a8 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	e00e      	b.n	8002648 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe febd 	bl	80013a8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d907      	bls.n	8002648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e150      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
 800263c:	40023800 	.word	0x40023800
 8002640:	42470000 	.word	0x42470000
 8002644:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b88      	ldr	r3, [pc, #544]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ea      	bne.n	800262a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8097 	beq.w	8002790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b81      	ldr	r3, [pc, #516]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b7d      	ldr	r3, [pc, #500]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	4a7c      	ldr	r2, [pc, #496]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	@ 0x40
 8002682:	4b7a      	ldr	r3, [pc, #488]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b77      	ldr	r3, [pc, #476]	@ (8002870 <HAL_RCC_OscConfig+0x474>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b74      	ldr	r3, [pc, #464]	@ (8002870 <HAL_RCC_OscConfig+0x474>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a73      	ldr	r2, [pc, #460]	@ (8002870 <HAL_RCC_OscConfig+0x474>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fe7d 	bl	80013a8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe fe79 	bl	80013a8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e10c      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <HAL_RCC_OscConfig+0x474>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2ea>
 80026d8:	4b64      	ldr	r3, [pc, #400]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026dc:	4a63      	ldr	r2, [pc, #396]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x324>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x30c>
 80026ee:	4b5f      	ldr	r3, [pc, #380]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a5e      	ldr	r2, [pc, #376]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fa:	4b5c      	ldr	r3, [pc, #368]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fe:	4a5b      	ldr	r2, [pc, #364]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6713      	str	r3, [r2, #112]	@ 0x70
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0x324>
 8002708:	4b58      	ldr	r3, [pc, #352]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270c:	4a57      	ldr	r2, [pc, #348]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	6713      	str	r3, [r2, #112]	@ 0x70
 8002714:	4b55      	ldr	r3, [pc, #340]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002718:	4a54      	ldr	r2, [pc, #336]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fe3e 	bl	80013a8 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fe3a 	bl	80013a8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0cb      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	4b49      	ldr	r3, [pc, #292]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ee      	beq.n	8002730 <HAL_RCC_OscConfig+0x334>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002754:	f7fe fe28 	bl	80013a8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fe24 	bl	80013a8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0b5      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	4b3e      	ldr	r3, [pc, #248]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1ee      	bne.n	800275c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4b39      	ldr	r3, [pc, #228]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	4a38      	ldr	r2, [pc, #224]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a1 	beq.w	80028dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279a:	4b34      	ldr	r3, [pc, #208]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d05c      	beq.n	8002860 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d141      	bne.n	8002832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b31      	ldr	r3, [pc, #196]	@ (8002874 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fdf8 	bl	80013a8 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fdf4 	bl	80013a8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e087      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b27      	ldr	r3, [pc, #156]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	019b      	lsls	r3, r3, #6
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	491b      	ldr	r1, [pc, #108]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_RCC_OscConfig+0x478>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe fdcd 	bl	80013a8 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe fdc9 	bl	80013a8 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e05c      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x416>
 8002830:	e054      	b.n	80028dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe fdb6 	bl	80013a8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fdb2 	bl	80013a8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e045      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x444>
 800285e:	e03d      	b.n	80028dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e038      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000
 8002874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002878:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_RCC_OscConfig+0x4ec>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d028      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d121      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	3b01      	subs	r3, #1
 80028c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0cc      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b68      	ldr	r3, [pc, #416]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d90c      	bls.n	8002928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a58      	ldr	r2, [pc, #352]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800294a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a52      	ldr	r2, [pc, #328]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d044      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d119      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e067      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b37      	ldr	r3, [pc, #220]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4934      	ldr	r1, [pc, #208]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7fe fce4 	bl	80013a8 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fce0 	bl	80013a8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e04f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d20c      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	@ (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fc44 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	08005634 	.word	0x08005634
 8002ab0:	20000014 	.word	0x20000014
 8002ab4:	20000018 	.word	0x20000018

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002abc:	b094      	sub	sp, #80	@ 0x50
 8002abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad0:	4b79      	ldr	r3, [pc, #484]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x40>
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	f200 80e1 	bhi.w	8002ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x34>
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aea:	e0db      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b73      	ldr	r3, [pc, #460]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002aee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002af0:	e0db      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af2:	4b73      	ldr	r3, [pc, #460]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002af4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002af6:	e0d8      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af8:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b02:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	2200      	movs	r2, #0
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	f04f 0000 	mov.w	r0, #0
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	0159      	lsls	r1, r3, #5
 8002b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3c:	0150      	lsls	r0, r2, #5
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4621      	mov	r1, r4
 8002b44:	1a51      	subs	r1, r2, r1
 8002b46:	6139      	str	r1, [r7, #16]
 8002b48:	4629      	mov	r1, r5
 8002b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	018b      	lsls	r3, r1, #6
 8002b60:	4651      	mov	r1, sl
 8002b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b66:	4651      	mov	r1, sl
 8002b68:	018a      	lsls	r2, r1, #6
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b70:	4659      	mov	r1, fp
 8002b72:	eb63 0901 	sbc.w	r9, r3, r1
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b8a:	4690      	mov	r8, r2
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	4623      	mov	r3, r4
 8002b90:	eb18 0303 	adds.w	r3, r8, r3
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	462b      	mov	r3, r5
 8002b98:	eb49 0303 	adc.w	r3, r9, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002baa:	4629      	mov	r1, r5
 8002bac:	024b      	lsls	r3, r1, #9
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	024a      	lsls	r2, r1, #9
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bc8:	f7fd fb62 	bl	8000290 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd4:	e058      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd6:	4b38      	ldr	r3, [pc, #224]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	4611      	mov	r1, r2
 8002be2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	0159      	lsls	r1, r3, #5
 8002bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c02:	0150      	lsls	r0, r2, #5
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4641      	mov	r1, r8
 8002c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c0e:	4649      	mov	r1, r9
 8002c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c28:	ebb2 040a 	subs.w	r4, r2, sl
 8002c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	00eb      	lsls	r3, r5, #3
 8002c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3e:	00e2      	lsls	r2, r4, #3
 8002c40:	4614      	mov	r4, r2
 8002c42:	461d      	mov	r5, r3
 8002c44:	4643      	mov	r3, r8
 8002c46:	18e3      	adds	r3, r4, r3
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	eb45 0303 	adc.w	r3, r5, r3
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5e:	4629      	mov	r1, r5
 8002c60:	028b      	lsls	r3, r1, #10
 8002c62:	4621      	mov	r1, r4
 8002c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c68:	4621      	mov	r1, r4
 8002c6a:	028a      	lsls	r2, r1, #10
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c72:	2200      	movs	r2, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	61fa      	str	r2, [r7, #28]
 8002c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c7c:	f7fd fb08 	bl	8000290 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	3301      	adds	r3, #1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3750      	adds	r7, #80	@ 0x50
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	007a1200 	.word	0x007a1200

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	@ (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000014 	.word	0x20000014

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	@ (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08005644 	.word	0x08005644

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffdc 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	@ (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	08005644 	.word	0x08005644

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e041      	b.n	8002dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe f96e 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fb24 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e041      	b.n	8002e60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d106      	bne.n	8002df6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f839 	bl	8002e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3304      	adds	r3, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 fad5 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_TIM_PWM_Start+0x24>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e022      	b.n	8002ee6 <HAL_TIM_PWM_Start+0x6a>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d109      	bne.n	8002eba <HAL_TIM_PWM_Start+0x3e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	e015      	b.n	8002ee6 <HAL_TIM_PWM_Start+0x6a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d109      	bne.n	8002ed4 <HAL_TIM_PWM_Start+0x58>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e008      	b.n	8002ee6 <HAL_TIM_PWM_Start+0x6a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	bf14      	ite	ne
 8002ee0:	2301      	movne	r3, #1
 8002ee2:	2300      	moveq	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e068      	b.n	8002fc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0x82>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002efc:	e013      	b.n	8002f26 <HAL_TIM_PWM_Start+0xaa>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x92>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f0c:	e00b      	b.n	8002f26 <HAL_TIM_PWM_Start+0xaa>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0xa2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f1c:	e003      	b.n	8002f26 <HAL_TIM_PWM_Start+0xaa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	6839      	ldr	r1, [r7, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fcf4 	bl	800391c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a23      	ldr	r2, [pc, #140]	@ (8002fc8 <HAL_TIM_PWM_Start+0x14c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d107      	bne.n	8002f4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <HAL_TIM_PWM_Start+0x14c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d018      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x10e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f60:	d013      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x10e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a19      	ldr	r2, [pc, #100]	@ (8002fcc <HAL_TIM_PWM_Start+0x150>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00e      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x10e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <HAL_TIM_PWM_Start+0x154>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x10e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	@ (8002fd4 <HAL_TIM_PWM_Start+0x158>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x10e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a14      	ldr	r2, [pc, #80]	@ (8002fd8 <HAL_TIM_PWM_Start+0x15c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	d010      	beq.n	8002fbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fac:	e007      	b.n	8002fbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	40000c00 	.word	0x40000c00
 8002fd8:	40014000 	.word	0x40014000

08002fdc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	6839      	ldr	r1, [r7, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fc94 	bl	800391c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a29      	ldr	r2, [pc, #164]	@ (80030a0 <HAL_TIM_PWM_Stop+0xc4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d117      	bne.n	800302e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10f      	bne.n	800302e <HAL_TIM_PWM_Stop+0x52>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	f240 4344 	movw	r3, #1092	@ 0x444
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <HAL_TIM_PWM_Stop+0x52>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <HAL_TIM_PWM_Stop+0x82>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a1a      	ldr	r2, [r3, #32]
 8003044:	f240 4344 	movw	r3, #1092	@ 0x444
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <HAL_TIM_PWM_Stop+0x82>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Stop+0x92>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800306c:	e013      	b.n	8003096 <HAL_TIM_PWM_Stop+0xba>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Stop+0xa2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800307c:	e00b      	b.n	8003096 <HAL_TIM_PWM_Stop+0xba>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Stop+0xb2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800308c:	e003      	b.n	8003096 <HAL_TIM_PWM_Stop+0xba>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40010000 	.word	0x40010000

080030a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0ae      	b.n	8003220 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	f200 809f 	bhi.w	8003210 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030d2:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	0800310d 	.word	0x0800310d
 80030dc:	08003211 	.word	0x08003211
 80030e0:	08003211 	.word	0x08003211
 80030e4:	08003211 	.word	0x08003211
 80030e8:	0800314d 	.word	0x0800314d
 80030ec:	08003211 	.word	0x08003211
 80030f0:	08003211 	.word	0x08003211
 80030f4:	08003211 	.word	0x08003211
 80030f8:	0800318f 	.word	0x0800318f
 80030fc:	08003211 	.word	0x08003211
 8003100:	08003211 	.word	0x08003211
 8003104:	08003211 	.word	0x08003211
 8003108:	080031cf 	.word	0x080031cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f9dc 	bl	80034d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6999      	ldr	r1, [r3, #24]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	619a      	str	r2, [r3, #24]
      break;
 800314a:	e064      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fa22 	bl	800359c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	021a      	lsls	r2, r3, #8
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	619a      	str	r2, [r3, #24]
      break;
 800318c:	e043      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fa6d 	bl	8003674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0208 	orr.w	r2, r2, #8
 80031a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0204 	bic.w	r2, r2, #4
 80031b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	61da      	str	r2, [r3, #28]
      break;
 80031cc:	e023      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fab7 	bl	8003748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69d9      	ldr	r1, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	021a      	lsls	r2, r3, #8
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	61da      	str	r2, [r3, #28]
      break;
 800320e:	e002      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	75fb      	strb	r3, [r7, #23]
      break;
 8003214:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800321e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_TIM_ConfigClockSource+0x1c>
 8003240:	2302      	movs	r3, #2
 8003242:	e0b4      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x186>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800326a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327c:	d03e      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0xd4>
 800327e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003282:	f200 8087 	bhi.w	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800328a:	f000 8086 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x172>
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d87f      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b70      	cmp	r3, #112	@ 0x70
 8003296:	d01a      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0xa6>
 8003298:	2b70      	cmp	r3, #112	@ 0x70
 800329a:	d87b      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b60      	cmp	r3, #96	@ 0x60
 800329e:	d050      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x11a>
 80032a0:	2b60      	cmp	r3, #96	@ 0x60
 80032a2:	d877      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b50      	cmp	r3, #80	@ 0x50
 80032a6:	d03c      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0xfa>
 80032a8:	2b50      	cmp	r3, #80	@ 0x50
 80032aa:	d873      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d058      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x13a>
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d86f      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b30      	cmp	r3, #48	@ 0x30
 80032b6:	d064      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032b8:	2b30      	cmp	r3, #48	@ 0x30
 80032ba:	d86b      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d060      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d867      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d05c      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d05a      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032cc:	e062      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032de:	f000 fafd 	bl	80038dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	609a      	str	r2, [r3, #8]
      break;
 80032fa:	e04f      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800330c:	f000 fae6 	bl	80038dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800331e:	609a      	str	r2, [r3, #8]
      break;
 8003320:	e03c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	461a      	mov	r2, r3
 8003330:	f000 fa5a 	bl	80037e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2150      	movs	r1, #80	@ 0x50
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fab3 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003340:	e02c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800334e:	461a      	mov	r2, r3
 8003350:	f000 fa79 	bl	8003846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2160      	movs	r1, #96	@ 0x60
 800335a:	4618      	mov	r0, r3
 800335c:	f000 faa3 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003360:	e01c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	461a      	mov	r2, r3
 8003370:	f000 fa3a 	bl	80037e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2140      	movs	r1, #64	@ 0x40
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fa93 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003380:	e00c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f000 fa8a 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003392:	e003      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      break;
 8003398:	e000      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800339a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3a      	ldr	r2, [pc, #232]	@ (80034b4 <TIM_Base_SetConfig+0xfc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00f      	beq.n	80033f0 <TIM_Base_SetConfig+0x38>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x38>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a37      	ldr	r2, [pc, #220]	@ (80034b8 <TIM_Base_SetConfig+0x100>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x38>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a36      	ldr	r2, [pc, #216]	@ (80034bc <TIM_Base_SetConfig+0x104>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x38>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a35      	ldr	r2, [pc, #212]	@ (80034c0 <TIM_Base_SetConfig+0x108>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2b      	ldr	r2, [pc, #172]	@ (80034b4 <TIM_Base_SetConfig+0xfc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01b      	beq.n	8003442 <TIM_Base_SetConfig+0x8a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003410:	d017      	beq.n	8003442 <TIM_Base_SetConfig+0x8a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a28      	ldr	r2, [pc, #160]	@ (80034b8 <TIM_Base_SetConfig+0x100>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <TIM_Base_SetConfig+0x8a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a27      	ldr	r2, [pc, #156]	@ (80034bc <TIM_Base_SetConfig+0x104>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00f      	beq.n	8003442 <TIM_Base_SetConfig+0x8a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a26      	ldr	r2, [pc, #152]	@ (80034c0 <TIM_Base_SetConfig+0x108>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_Base_SetConfig+0x8a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <TIM_Base_SetConfig+0x10c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_Base_SetConfig+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a24      	ldr	r2, [pc, #144]	@ (80034c8 <TIM_Base_SetConfig+0x110>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_Base_SetConfig+0x8a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a23      	ldr	r2, [pc, #140]	@ (80034cc <TIM_Base_SetConfig+0x114>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d108      	bne.n	8003454 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0e      	ldr	r2, [pc, #56]	@ (80034b4 <TIM_Base_SetConfig+0xfc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d103      	bne.n	8003488 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	611a      	str	r2, [r3, #16]
  }
}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800

080034d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f023 0201 	bic.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f023 0302 	bic.w	r3, r3, #2
 8003518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1c      	ldr	r2, [pc, #112]	@ (8003598 <TIM_OC1_SetConfig+0xc8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10c      	bne.n	8003546 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0308 	bic.w	r3, r3, #8
 8003532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a13      	ldr	r2, [pc, #76]	@ (8003598 <TIM_OC1_SetConfig+0xc8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d111      	bne.n	8003572 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800355c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	621a      	str	r2, [r3, #32]
}
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40010000 	.word	0x40010000

0800359c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 0210 	bic.w	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0320 	bic.w	r3, r3, #32
 80035e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003670 <TIM_OC2_SetConfig+0xd4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10d      	bne.n	8003618 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <TIM_OC2_SetConfig+0xd4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d113      	bne.n	8003648 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800362e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000

08003674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <TIM_OC3_SetConfig+0xd0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10d      	bne.n	80036ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a14      	ldr	r2, [pc, #80]	@ (8003744 <TIM_OC3_SetConfig+0xd0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d113      	bne.n	800371e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40010000 	.word	0x40010000

08003748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	031b      	lsls	r3, r3, #12
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a10      	ldr	r2, [pc, #64]	@ (80037e4 <TIM_OC4_SetConfig+0x9c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d109      	bne.n	80037bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	019b      	lsls	r3, r3, #6
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000

080037e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f023 0201 	bic.w	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f023 030a 	bic.w	r3, r3, #10
 8003824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f023 0210 	bic.w	r2, r3, #16
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	031b      	lsls	r3, r3, #12
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f043 0307 	orr.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	021a      	lsls	r2, r3, #8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	431a      	orrs	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4313      	orrs	r3, r2
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2201      	movs	r2, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	43db      	mvns	r3, r3
 800393e:	401a      	ands	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e050      	b.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1c      	ldr	r2, [pc, #112]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d018      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039cc:	d013      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00e      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a16      	ldr	r2, [pc, #88]	@ (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a15      	ldr	r2, [pc, #84]	@ (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a13      	ldr	r2, [pc, #76]	@ (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d10c      	bne.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40014000 	.word	0x40014000

08003a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e042      	b.n	8003adc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fb3a 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	@ 0x24
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fdbd 	bl	8004608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d175      	bne.n	8003bf0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Transmit+0x2c>
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e06e      	b.n	8003bf2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2221      	movs	r2, #33	@ 0x21
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b22:	f7fd fc41 	bl	80013a8 <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3c:	d108      	bne.n	8003b50 <HAL_UART_Transmit+0x6c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e003      	b.n	8003b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b58:	e02e      	b.n	8003bb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2180      	movs	r1, #128	@ 0x80
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fb1f 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e03a      	b.n	8003bf2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	3302      	adds	r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	e007      	b.n	8003baa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1cb      	bne.n	8003b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2140      	movs	r1, #64	@ 0x40
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 faeb 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e006      	b.n	8003bf2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	4613      	mov	r3, r2
 8003c06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d112      	bne.n	8003c3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_UART_Receive_IT+0x26>
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e00b      	b.n	8003c3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fb12 	bl	800425a <UART_Start_Receive_IT>
 8003c36:	4603      	mov	r3, r0
 8003c38:	e000      	b.n	8003c3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b0ba      	sub	sp, #232	@ 0xe8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_UART_IRQHandler+0x66>
 8003c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fbf2 	bl	800448c <UART_Receive_IT>
      return;
 8003ca8:	e25b      	b.n	8004162 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80de 	beq.w	8003e70 <HAL_UART_IRQHandler+0x22c>
 8003cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80d1 	beq.w	8003e70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xae>
 8003cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_UART_IRQHandler+0xd2>
 8003cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_UART_IRQHandler+0xf6>
 8003d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f043 0204 	orr.w	r2, r3, #4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d011      	beq.n	8003d6a <HAL_UART_IRQHandler+0x126>
 8003d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	f043 0208 	orr.w	r2, r3, #8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 81f2 	beq.w	8004158 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_UART_IRQHandler+0x14e>
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb7d 	bl	800448c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b40      	cmp	r3, #64	@ 0x40
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <HAL_UART_IRQHandler+0x17a>
 8003db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d04f      	beq.n	8003e5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa85 	bl	80042ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dce:	2b40      	cmp	r3, #64	@ 0x40
 8003dd0:	d141      	bne.n	8003e56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1d9      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d013      	beq.n	8003e4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004024 <HAL_UART_IRQHandler+0x3e0>)
 8003e2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fc69 	bl	800170a <HAL_DMA_Abort_IT>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	e00e      	b.n	8003e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f994 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	e00a      	b.n	8003e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f990 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	e006      	b.n	8003e6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f98c 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e6a:	e175      	b.n	8004158 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	bf00      	nop
    return;
 8003e6e:	e173      	b.n	8004158 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	f040 814f 	bne.w	8004118 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8148 	beq.w	8004118 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8141 	beq.w	8004118 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	f040 80b6 	bne.w	8004028 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ec8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8145 	beq.w	800415c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eda:	429a      	cmp	r2, r3
 8003edc:	f080 813e 	bcs.w	800415c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ee6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef2:	f000 8088 	beq.w	8004006 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1d9      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3314      	adds	r3, #20
 8003f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e1      	bne.n	8003f42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3314      	adds	r3, #20
 8003f84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e3      	bne.n	8003f7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fe8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e3      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	4618      	mov	r0, r3
 8004002:	f7fd fb12 	bl	800162a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004014:	b29b      	uxth	r3, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	b29b      	uxth	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f8b7 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004022:	e09b      	b.n	800415c <HAL_UART_IRQHandler+0x518>
 8004024:	08004395 	.word	0x08004395
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004030:	b29b      	uxth	r3, r3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 808e 	beq.w	8004160 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8089 	beq.w	8004160 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004064:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004072:	647a      	str	r2, [r7, #68]	@ 0x44
 8004074:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e3      	bne.n	800404e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3314      	adds	r3, #20
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	623b      	str	r3, [r7, #32]
   return(result);
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e3      	bne.n	8004086 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	60fb      	str	r3, [r7, #12]
   return(result);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0310 	bic.w	r3, r3, #16
 80040e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040f0:	61fa      	str	r2, [r7, #28]
 80040f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	69b9      	ldr	r1, [r7, #24]
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	617b      	str	r3, [r7, #20]
   return(result);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e3      	bne.n	80040cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800410a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f83d 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004116:	e023      	b.n	8004160 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <HAL_UART_IRQHandler+0x4f4>
 8004124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f943 	bl	80043bc <UART_Transmit_IT>
    return;
 8004136:	e014      	b.n	8004162 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <HAL_UART_IRQHandler+0x51e>
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f983 	bl	800445c <UART_EndTransmit_IT>
    return;
 8004156:	e004      	b.n	8004162 <HAL_UART_IRQHandler+0x51e>
    return;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <HAL_UART_IRQHandler+0x51e>
      return;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_UART_IRQHandler+0x51e>
      return;
 8004160:	bf00      	nop
  }
}
 8004162:	37e8      	adds	r7, #232	@ 0xe8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b8:	e03b      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d037      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fd f8f1 	bl	80013a8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e03a      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d023      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b80      	cmp	r3, #128	@ 0x80
 80041ee:	d020      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b40      	cmp	r3, #64	@ 0x40
 80041f4:	d01d      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d116      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f857 	bl	80042ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2208      	movs	r2, #8
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00f      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d0b4      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2222      	movs	r2, #34	@ 0x22
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800429e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0220 	orr.w	r2, r2, #32
 80042be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b095      	sub	sp, #84	@ 0x54
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	61fb      	str	r3, [r7, #28]
   return(result);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3314      	adds	r3, #20
 8004328:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800432a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e5      	bne.n	800430a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	2b01      	cmp	r3, #1
 8004344:	d119      	bne.n	800437a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	60bb      	str	r3, [r7, #8]
   return(result);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	647b      	str	r3, [r7, #68]	@ 0x44
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004366:	61ba      	str	r2, [r7, #24]
 8004368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6979      	ldr	r1, [r7, #20]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	613b      	str	r3, [r7, #16]
   return(result);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004388:	bf00      	nop
 800438a:	3754      	adds	r7, #84	@ 0x54
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff fee4 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b21      	cmp	r3, #33	@ 0x21
 80043ce:	d13e      	bne.n	800444e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d8:	d114      	bne.n	8004404 <UART_Transmit_IT+0x48>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d110      	bne.n	8004404 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	1c9a      	adds	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	621a      	str	r2, [r3, #32]
 8004402:	e008      	b.n	8004416 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6211      	str	r1, [r2, #32]
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4619      	mov	r1, r3
 8004424:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10f      	bne.n	800444a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004438:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004448:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004472:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff fe73 	bl	8004168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	@ 0x30
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b22      	cmp	r3, #34	@ 0x22
 800449e:	f040 80ae 	bne.w	80045fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044aa:	d117      	bne.n	80044dc <UART_Receive_IT+0x50>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	1c9a      	adds	r2, r3, #2
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044da:	e026      	b.n	800452a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ee:	d007      	beq.n	8004500 <UART_Receive_IT+0x74>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <UART_Receive_IT+0x82>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e008      	b.n	8004520 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800451a:	b2da      	uxtb	r2, r3
 800451c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29b      	uxth	r3, r3
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4619      	mov	r1, r3
 8004538:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800453a:	2b00      	cmp	r3, #0
 800453c:	d15d      	bne.n	80045fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0220 	bic.w	r2, r2, #32
 800454c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800455c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	2b01      	cmp	r3, #1
 8004582:	d135      	bne.n	80045f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f023 0310 	bic.w	r3, r3, #16
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045aa:	623a      	str	r2, [r7, #32]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	69f9      	ldr	r1, [r7, #28]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d10a      	bne.n	80045e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fdd1 	bl	8004190 <HAL_UARTEx_RxEventCallback>
 80045ee:	e002      	b.n	80045f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc fc0d 	bl	8000e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e002      	b.n	8004600 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3730      	adds	r7, #48	@ 0x30
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b0c0      	sub	sp, #256	@ 0x100
 800460e:	af00      	add	r7, sp, #0
 8004610:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	68d9      	ldr	r1, [r3, #12]
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	ea40 0301 	orr.w	r3, r0, r1
 8004630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	431a      	orrs	r2, r3
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	431a      	orrs	r2, r3
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004660:	f021 010c 	bic.w	r1, r1, #12
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800466e:	430b      	orrs	r3, r1
 8004670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004682:	6999      	ldr	r1, [r3, #24]
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	ea40 0301 	orr.w	r3, r0, r1
 800468e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b8f      	ldr	r3, [pc, #572]	@ (80048d4 <UART_SetConfig+0x2cc>)
 8004698:	429a      	cmp	r2, r3
 800469a:	d005      	beq.n	80046a8 <UART_SetConfig+0xa0>
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b8d      	ldr	r3, [pc, #564]	@ (80048d8 <UART_SetConfig+0x2d0>)
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d104      	bne.n	80046b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a8:	f7fe fb2c 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 80046ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046b0:	e003      	b.n	80046ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046b2:	f7fe fb13 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80046b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c4:	f040 810c 	bne.w	80048e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046da:	4622      	mov	r2, r4
 80046dc:	462b      	mov	r3, r5
 80046de:	1891      	adds	r1, r2, r2
 80046e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046e2:	415b      	adcs	r3, r3
 80046e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046ea:	4621      	mov	r1, r4
 80046ec:	eb12 0801 	adds.w	r8, r2, r1
 80046f0:	4629      	mov	r1, r5
 80046f2:	eb43 0901 	adc.w	r9, r3, r1
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800470a:	4690      	mov	r8, r2
 800470c:	4699      	mov	r9, r3
 800470e:	4623      	mov	r3, r4
 8004710:	eb18 0303 	adds.w	r3, r8, r3
 8004714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004718:	462b      	mov	r3, r5
 800471a:	eb49 0303 	adc.w	r3, r9, r3
 800471e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800472e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004736:	460b      	mov	r3, r1
 8004738:	18db      	adds	r3, r3, r3
 800473a:	653b      	str	r3, [r7, #80]	@ 0x50
 800473c:	4613      	mov	r3, r2
 800473e:	eb42 0303 	adc.w	r3, r2, r3
 8004742:	657b      	str	r3, [r7, #84]	@ 0x54
 8004744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800474c:	f7fb fda0 	bl	8000290 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4b61      	ldr	r3, [pc, #388]	@ (80048dc <UART_SetConfig+0x2d4>)
 8004756:	fba3 2302 	umull	r2, r3, r3, r2
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	011c      	lsls	r4, r3, #4
 800475e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004762:	2200      	movs	r2, #0
 8004764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004768:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800476c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	1891      	adds	r1, r2, r2
 8004776:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004778:	415b      	adcs	r3, r3
 800477a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800477c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004780:	4641      	mov	r1, r8
 8004782:	eb12 0a01 	adds.w	sl, r2, r1
 8004786:	4649      	mov	r1, r9
 8004788:	eb43 0b01 	adc.w	fp, r3, r1
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004798:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800479c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047a0:	4692      	mov	sl, r2
 80047a2:	469b      	mov	fp, r3
 80047a4:	4643      	mov	r3, r8
 80047a6:	eb1a 0303 	adds.w	r3, sl, r3
 80047aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047ae:	464b      	mov	r3, r9
 80047b0:	eb4b 0303 	adc.w	r3, fp, r3
 80047b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047cc:	460b      	mov	r3, r1
 80047ce:	18db      	adds	r3, r3, r3
 80047d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80047d2:	4613      	mov	r3, r2
 80047d4:	eb42 0303 	adc.w	r3, r2, r3
 80047d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047e2:	f7fb fd55 	bl	8000290 <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4611      	mov	r1, r2
 80047ec:	4b3b      	ldr	r3, [pc, #236]	@ (80048dc <UART_SetConfig+0x2d4>)
 80047ee:	fba3 2301 	umull	r2, r3, r3, r1
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2264      	movs	r2, #100	@ 0x64
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	1acb      	subs	r3, r1, r3
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004802:	4b36      	ldr	r3, [pc, #216]	@ (80048dc <UART_SetConfig+0x2d4>)
 8004804:	fba3 2302 	umull	r2, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004810:	441c      	add	r4, r3
 8004812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800481c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004820:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004824:	4642      	mov	r2, r8
 8004826:	464b      	mov	r3, r9
 8004828:	1891      	adds	r1, r2, r2
 800482a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800482c:	415b      	adcs	r3, r3
 800482e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004834:	4641      	mov	r1, r8
 8004836:	1851      	adds	r1, r2, r1
 8004838:	6339      	str	r1, [r7, #48]	@ 0x30
 800483a:	4649      	mov	r1, r9
 800483c:	414b      	adcs	r3, r1
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800484c:	4659      	mov	r1, fp
 800484e:	00cb      	lsls	r3, r1, #3
 8004850:	4651      	mov	r1, sl
 8004852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004856:	4651      	mov	r1, sl
 8004858:	00ca      	lsls	r2, r1, #3
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	4603      	mov	r3, r0
 8004860:	4642      	mov	r2, r8
 8004862:	189b      	adds	r3, r3, r2
 8004864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004868:	464b      	mov	r3, r9
 800486a:	460a      	mov	r2, r1
 800486c:	eb42 0303 	adc.w	r3, r2, r3
 8004870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004880:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004884:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004888:	460b      	mov	r3, r1
 800488a:	18db      	adds	r3, r3, r3
 800488c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800488e:	4613      	mov	r3, r2
 8004890:	eb42 0303 	adc.w	r3, r2, r3
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800489a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800489e:	f7fb fcf7 	bl	8000290 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4b0d      	ldr	r3, [pc, #52]	@ (80048dc <UART_SetConfig+0x2d4>)
 80048a8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	2164      	movs	r1, #100	@ 0x64
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	3332      	adds	r3, #50	@ 0x32
 80048ba:	4a08      	ldr	r2, [pc, #32]	@ (80048dc <UART_SetConfig+0x2d4>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	f003 0207 	and.w	r2, r3, #7
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4422      	add	r2, r4
 80048ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048d0:	e106      	b.n	8004ae0 <UART_SetConfig+0x4d8>
 80048d2:	bf00      	nop
 80048d4:	40011000 	.word	0x40011000
 80048d8:	40011400 	.word	0x40011400
 80048dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048f2:	4642      	mov	r2, r8
 80048f4:	464b      	mov	r3, r9
 80048f6:	1891      	adds	r1, r2, r2
 80048f8:	6239      	str	r1, [r7, #32]
 80048fa:	415b      	adcs	r3, r3
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004902:	4641      	mov	r1, r8
 8004904:	1854      	adds	r4, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb43 0501 	adc.w	r5, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	00eb      	lsls	r3, r5, #3
 8004916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800491a:	00e2      	lsls	r2, r4, #3
 800491c:	4614      	mov	r4, r2
 800491e:	461d      	mov	r5, r3
 8004920:	4643      	mov	r3, r8
 8004922:	18e3      	adds	r3, r4, r3
 8004924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004928:	464b      	mov	r3, r9
 800492a:	eb45 0303 	adc.w	r3, r5, r3
 800492e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800493e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800494e:	4629      	mov	r1, r5
 8004950:	008b      	lsls	r3, r1, #2
 8004952:	4621      	mov	r1, r4
 8004954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004958:	4621      	mov	r1, r4
 800495a:	008a      	lsls	r2, r1, #2
 800495c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004960:	f7fb fc96 	bl	8000290 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4b60      	ldr	r3, [pc, #384]	@ (8004aec <UART_SetConfig+0x4e4>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	011c      	lsls	r4, r3, #4
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800497c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004980:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	61b9      	str	r1, [r7, #24]
 800498c:	415b      	adcs	r3, r3
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004994:	4641      	mov	r1, r8
 8004996:	1851      	adds	r1, r2, r1
 8004998:	6139      	str	r1, [r7, #16]
 800499a:	4649      	mov	r1, r9
 800499c:	414b      	adcs	r3, r1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049ac:	4659      	mov	r1, fp
 80049ae:	00cb      	lsls	r3, r1, #3
 80049b0:	4651      	mov	r1, sl
 80049b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b6:	4651      	mov	r1, sl
 80049b8:	00ca      	lsls	r2, r1, #3
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	4642      	mov	r2, r8
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049c8:	464b      	mov	r3, r9
 80049ca:	460a      	mov	r2, r1
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049ec:	4649      	mov	r1, r9
 80049ee:	008b      	lsls	r3, r1, #2
 80049f0:	4641      	mov	r1, r8
 80049f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f6:	4641      	mov	r1, r8
 80049f8:	008a      	lsls	r2, r1, #2
 80049fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049fe:	f7fb fc47 	bl	8000290 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	4b38      	ldr	r3, [pc, #224]	@ (8004aec <UART_SetConfig+0x4e4>)
 8004a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	2264      	movs	r2, #100	@ 0x64
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	1acb      	subs	r3, r1, r3
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	3332      	adds	r3, #50	@ 0x32
 8004a1c:	4a33      	ldr	r2, [pc, #204]	@ (8004aec <UART_SetConfig+0x4e4>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a28:	441c      	add	r4, r3
 8004a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a2e:	2200      	movs	r2, #0
 8004a30:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a32:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	415b      	adcs	r3, r3
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a48:	4641      	mov	r1, r8
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	4649      	mov	r1, r9
 8004a50:	414b      	adcs	r3, r1
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a60:	4659      	mov	r1, fp
 8004a62:	00cb      	lsls	r3, r1, #3
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	00ca      	lsls	r2, r1, #3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	4642      	mov	r2, r8
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	460a      	mov	r2, r1
 8004a7e:	eb42 0303 	adc.w	r3, r2, r3
 8004a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	008b      	lsls	r3, r1, #2
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	008a      	lsls	r2, r1, #2
 8004aaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004aae:	f7fb fbef 	bl	8000290 <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <UART_SetConfig+0x4e4>)
 8004ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	2164      	movs	r1, #100	@ 0x64
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	3332      	adds	r3, #50	@ 0x32
 8004aca:	4a08      	ldr	r2, [pc, #32]	@ (8004aec <UART_SetConfig+0x4e4>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4422      	add	r2, r4
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aec:	51eb851f 	.word	0x51eb851f

08004af0 <atoi>:
 8004af0:	220a      	movs	r2, #10
 8004af2:	2100      	movs	r1, #0
 8004af4:	f000 b894 	b.w	8004c20 <strtol>

08004af8 <__itoa>:
 8004af8:	1e93      	subs	r3, r2, #2
 8004afa:	2b22      	cmp	r3, #34	@ 0x22
 8004afc:	b510      	push	{r4, lr}
 8004afe:	460c      	mov	r4, r1
 8004b00:	d904      	bls.n	8004b0c <__itoa+0x14>
 8004b02:	2300      	movs	r3, #0
 8004b04:	700b      	strb	r3, [r1, #0]
 8004b06:	461c      	mov	r4, r3
 8004b08:	4620      	mov	r0, r4
 8004b0a:	bd10      	pop	{r4, pc}
 8004b0c:	2a0a      	cmp	r2, #10
 8004b0e:	d109      	bne.n	8004b24 <__itoa+0x2c>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	da07      	bge.n	8004b24 <__itoa+0x2c>
 8004b14:	232d      	movs	r3, #45	@ 0x2d
 8004b16:	700b      	strb	r3, [r1, #0]
 8004b18:	4240      	negs	r0, r0
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4421      	add	r1, r4
 8004b1e:	f000 f889 	bl	8004c34 <__utoa>
 8004b22:	e7f1      	b.n	8004b08 <__itoa+0x10>
 8004b24:	2100      	movs	r1, #0
 8004b26:	e7f9      	b.n	8004b1c <__itoa+0x24>

08004b28 <itoa>:
 8004b28:	f7ff bfe6 	b.w	8004af8 <__itoa>

08004b2c <_strtol_l.constprop.0>:
 8004b2c:	2b24      	cmp	r3, #36	@ 0x24
 8004b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b32:	4686      	mov	lr, r0
 8004b34:	4690      	mov	r8, r2
 8004b36:	d801      	bhi.n	8004b3c <_strtol_l.constprop.0+0x10>
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d106      	bne.n	8004b4a <_strtol_l.constprop.0+0x1e>
 8004b3c:	f000 f8e4 	bl	8004d08 <__errno>
 8004b40:	2316      	movs	r3, #22
 8004b42:	6003      	str	r3, [r0, #0]
 8004b44:	2000      	movs	r0, #0
 8004b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4a:	4834      	ldr	r0, [pc, #208]	@ (8004c1c <_strtol_l.constprop.0+0xf0>)
 8004b4c:	460d      	mov	r5, r1
 8004b4e:	462a      	mov	r2, r5
 8004b50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b54:	5d06      	ldrb	r6, [r0, r4]
 8004b56:	f016 0608 	ands.w	r6, r6, #8
 8004b5a:	d1f8      	bne.n	8004b4e <_strtol_l.constprop.0+0x22>
 8004b5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004b5e:	d12d      	bne.n	8004bbc <_strtol_l.constprop.0+0x90>
 8004b60:	782c      	ldrb	r4, [r5, #0]
 8004b62:	2601      	movs	r6, #1
 8004b64:	1c95      	adds	r5, r2, #2
 8004b66:	f033 0210 	bics.w	r2, r3, #16
 8004b6a:	d109      	bne.n	8004b80 <_strtol_l.constprop.0+0x54>
 8004b6c:	2c30      	cmp	r4, #48	@ 0x30
 8004b6e:	d12a      	bne.n	8004bc6 <_strtol_l.constprop.0+0x9a>
 8004b70:	782a      	ldrb	r2, [r5, #0]
 8004b72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004b76:	2a58      	cmp	r2, #88	@ 0x58
 8004b78:	d125      	bne.n	8004bc6 <_strtol_l.constprop.0+0x9a>
 8004b7a:	786c      	ldrb	r4, [r5, #1]
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	3502      	adds	r5, #2
 8004b80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004b84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b88:	2200      	movs	r2, #0
 8004b8a:	fbbc f9f3 	udiv	r9, ip, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004b98:	2f09      	cmp	r7, #9
 8004b9a:	d81b      	bhi.n	8004bd4 <_strtol_l.constprop.0+0xa8>
 8004b9c:	463c      	mov	r4, r7
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	dd27      	ble.n	8004bf2 <_strtol_l.constprop.0+0xc6>
 8004ba2:	1c57      	adds	r7, r2, #1
 8004ba4:	d007      	beq.n	8004bb6 <_strtol_l.constprop.0+0x8a>
 8004ba6:	4581      	cmp	r9, r0
 8004ba8:	d320      	bcc.n	8004bec <_strtol_l.constprop.0+0xc0>
 8004baa:	d101      	bne.n	8004bb0 <_strtol_l.constprop.0+0x84>
 8004bac:	45a2      	cmp	sl, r4
 8004bae:	db1d      	blt.n	8004bec <_strtol_l.constprop.0+0xc0>
 8004bb0:	fb00 4003 	mla	r0, r0, r3, r4
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bba:	e7eb      	b.n	8004b94 <_strtol_l.constprop.0+0x68>
 8004bbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8004bbe:	bf04      	itt	eq
 8004bc0:	782c      	ldrbeq	r4, [r5, #0]
 8004bc2:	1c95      	addeq	r5, r2, #2
 8004bc4:	e7cf      	b.n	8004b66 <_strtol_l.constprop.0+0x3a>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1da      	bne.n	8004b80 <_strtol_l.constprop.0+0x54>
 8004bca:	2c30      	cmp	r4, #48	@ 0x30
 8004bcc:	bf0c      	ite	eq
 8004bce:	2308      	moveq	r3, #8
 8004bd0:	230a      	movne	r3, #10
 8004bd2:	e7d5      	b.n	8004b80 <_strtol_l.constprop.0+0x54>
 8004bd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004bd8:	2f19      	cmp	r7, #25
 8004bda:	d801      	bhi.n	8004be0 <_strtol_l.constprop.0+0xb4>
 8004bdc:	3c37      	subs	r4, #55	@ 0x37
 8004bde:	e7de      	b.n	8004b9e <_strtol_l.constprop.0+0x72>
 8004be0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004be4:	2f19      	cmp	r7, #25
 8004be6:	d804      	bhi.n	8004bf2 <_strtol_l.constprop.0+0xc6>
 8004be8:	3c57      	subs	r4, #87	@ 0x57
 8004bea:	e7d8      	b.n	8004b9e <_strtol_l.constprop.0+0x72>
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	e7e1      	b.n	8004bb6 <_strtol_l.constprop.0+0x8a>
 8004bf2:	1c53      	adds	r3, r2, #1
 8004bf4:	d108      	bne.n	8004c08 <_strtol_l.constprop.0+0xdc>
 8004bf6:	2322      	movs	r3, #34	@ 0x22
 8004bf8:	f8ce 3000 	str.w	r3, [lr]
 8004bfc:	4660      	mov	r0, ip
 8004bfe:	f1b8 0f00 	cmp.w	r8, #0
 8004c02:	d0a0      	beq.n	8004b46 <_strtol_l.constprop.0+0x1a>
 8004c04:	1e69      	subs	r1, r5, #1
 8004c06:	e006      	b.n	8004c16 <_strtol_l.constprop.0+0xea>
 8004c08:	b106      	cbz	r6, 8004c0c <_strtol_l.constprop.0+0xe0>
 8004c0a:	4240      	negs	r0, r0
 8004c0c:	f1b8 0f00 	cmp.w	r8, #0
 8004c10:	d099      	beq.n	8004b46 <_strtol_l.constprop.0+0x1a>
 8004c12:	2a00      	cmp	r2, #0
 8004c14:	d1f6      	bne.n	8004c04 <_strtol_l.constprop.0+0xd8>
 8004c16:	f8c8 1000 	str.w	r1, [r8]
 8004c1a:	e794      	b.n	8004b46 <_strtol_l.constprop.0+0x1a>
 8004c1c:	08005672 	.word	0x08005672

08004c20 <strtol>:
 8004c20:	4613      	mov	r3, r2
 8004c22:	460a      	mov	r2, r1
 8004c24:	4601      	mov	r1, r0
 8004c26:	4802      	ldr	r0, [pc, #8]	@ (8004c30 <strtol+0x10>)
 8004c28:	6800      	ldr	r0, [r0, #0]
 8004c2a:	f7ff bf7f 	b.w	8004b2c <_strtol_l.constprop.0>
 8004c2e:	bf00      	nop
 8004c30:	20000020 	.word	0x20000020

08004c34 <__utoa>:
 8004c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c36:	4c1f      	ldr	r4, [pc, #124]	@ (8004cb4 <__utoa+0x80>)
 8004c38:	b08b      	sub	sp, #44	@ 0x2c
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	466e      	mov	r6, sp
 8004c40:	f104 0c20 	add.w	ip, r4, #32
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	6861      	ldr	r1, [r4, #4]
 8004c48:	4637      	mov	r7, r6
 8004c4a:	c703      	stmia	r7!, {r0, r1}
 8004c4c:	3408      	adds	r4, #8
 8004c4e:	4564      	cmp	r4, ip
 8004c50:	463e      	mov	r6, r7
 8004c52:	d1f7      	bne.n	8004c44 <__utoa+0x10>
 8004c54:	7921      	ldrb	r1, [r4, #4]
 8004c56:	7139      	strb	r1, [r7, #4]
 8004c58:	1e91      	subs	r1, r2, #2
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	6038      	str	r0, [r7, #0]
 8004c5e:	2922      	cmp	r1, #34	@ 0x22
 8004c60:	f04f 0100 	mov.w	r1, #0
 8004c64:	d904      	bls.n	8004c70 <__utoa+0x3c>
 8004c66:	7019      	strb	r1, [r3, #0]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	b00b      	add	sp, #44	@ 0x2c
 8004c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c70:	1e58      	subs	r0, r3, #1
 8004c72:	4684      	mov	ip, r0
 8004c74:	fbb5 f7f2 	udiv	r7, r5, r2
 8004c78:	fb02 5617 	mls	r6, r2, r7, r5
 8004c7c:	3628      	adds	r6, #40	@ 0x28
 8004c7e:	446e      	add	r6, sp
 8004c80:	460c      	mov	r4, r1
 8004c82:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004c86:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004c8a:	462e      	mov	r6, r5
 8004c8c:	42b2      	cmp	r2, r6
 8004c8e:	f101 0101 	add.w	r1, r1, #1
 8004c92:	463d      	mov	r5, r7
 8004c94:	d9ee      	bls.n	8004c74 <__utoa+0x40>
 8004c96:	2200      	movs	r2, #0
 8004c98:	545a      	strb	r2, [r3, r1]
 8004c9a:	1919      	adds	r1, r3, r4
 8004c9c:	1aa5      	subs	r5, r4, r2
 8004c9e:	42aa      	cmp	r2, r5
 8004ca0:	dae3      	bge.n	8004c6a <__utoa+0x36>
 8004ca2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004ca6:	780e      	ldrb	r6, [r1, #0]
 8004ca8:	7006      	strb	r6, [r0, #0]
 8004caa:	3201      	adds	r2, #1
 8004cac:	f801 5901 	strb.w	r5, [r1], #-1
 8004cb0:	e7f4      	b.n	8004c9c <__utoa+0x68>
 8004cb2:	bf00      	nop
 8004cb4:	0800564c 	.word	0x0800564c

08004cb8 <siprintf>:
 8004cb8:	b40e      	push	{r1, r2, r3}
 8004cba:	b500      	push	{lr}
 8004cbc:	b09c      	sub	sp, #112	@ 0x70
 8004cbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cc0:	9002      	str	r0, [sp, #8]
 8004cc2:	9006      	str	r0, [sp, #24]
 8004cc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cc8:	4809      	ldr	r0, [pc, #36]	@ (8004cf0 <siprintf+0x38>)
 8004cca:	9107      	str	r1, [sp, #28]
 8004ccc:	9104      	str	r1, [sp, #16]
 8004cce:	4909      	ldr	r1, [pc, #36]	@ (8004cf4 <siprintf+0x3c>)
 8004cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cd4:	9105      	str	r1, [sp, #20]
 8004cd6:	6800      	ldr	r0, [r0, #0]
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	a902      	add	r1, sp, #8
 8004cdc:	f000 f994 	bl	8005008 <_svfiprintf_r>
 8004ce0:	9b02      	ldr	r3, [sp, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	b01c      	add	sp, #112	@ 0x70
 8004ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cec:	b003      	add	sp, #12
 8004cee:	4770      	bx	lr
 8004cf0:	20000020 	.word	0x20000020
 8004cf4:	ffff0208 	.word	0xffff0208

08004cf8 <memset>:
 8004cf8:	4402      	add	r2, r0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d100      	bne.n	8004d02 <memset+0xa>
 8004d00:	4770      	bx	lr
 8004d02:	f803 1b01 	strb.w	r1, [r3], #1
 8004d06:	e7f9      	b.n	8004cfc <memset+0x4>

08004d08 <__errno>:
 8004d08:	4b01      	ldr	r3, [pc, #4]	@ (8004d10 <__errno+0x8>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000020 	.word	0x20000020

08004d14 <__libc_init_array>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4d0d      	ldr	r5, [pc, #52]	@ (8004d4c <__libc_init_array+0x38>)
 8004d18:	4c0d      	ldr	r4, [pc, #52]	@ (8004d50 <__libc_init_array+0x3c>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	2600      	movs	r6, #0
 8004d20:	42a6      	cmp	r6, r4
 8004d22:	d109      	bne.n	8004d38 <__libc_init_array+0x24>
 8004d24:	4d0b      	ldr	r5, [pc, #44]	@ (8004d54 <__libc_init_array+0x40>)
 8004d26:	4c0c      	ldr	r4, [pc, #48]	@ (8004d58 <__libc_init_array+0x44>)
 8004d28:	f000 fc66 	bl	80055f8 <_init>
 8004d2c:	1b64      	subs	r4, r4, r5
 8004d2e:	10a4      	asrs	r4, r4, #2
 8004d30:	2600      	movs	r6, #0
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	d105      	bne.n	8004d42 <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3c:	4798      	blx	r3
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7ee      	b.n	8004d20 <__libc_init_array+0xc>
 8004d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d46:	4798      	blx	r3
 8004d48:	3601      	adds	r6, #1
 8004d4a:	e7f2      	b.n	8004d32 <__libc_init_array+0x1e>
 8004d4c:	080057b0 	.word	0x080057b0
 8004d50:	080057b0 	.word	0x080057b0
 8004d54:	080057b0 	.word	0x080057b0
 8004d58:	080057b4 	.word	0x080057b4

08004d5c <__retarget_lock_acquire_recursive>:
 8004d5c:	4770      	bx	lr

08004d5e <__retarget_lock_release_recursive>:
 8004d5e:	4770      	bx	lr

08004d60 <_free_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4605      	mov	r5, r0
 8004d64:	2900      	cmp	r1, #0
 8004d66:	d041      	beq.n	8004dec <_free_r+0x8c>
 8004d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6c:	1f0c      	subs	r4, r1, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bfb8      	it	lt
 8004d72:	18e4      	addlt	r4, r4, r3
 8004d74:	f000 f8e0 	bl	8004f38 <__malloc_lock>
 8004d78:	4a1d      	ldr	r2, [pc, #116]	@ (8004df0 <_free_r+0x90>)
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	b933      	cbnz	r3, 8004d8c <_free_r+0x2c>
 8004d7e:	6063      	str	r3, [r4, #4]
 8004d80:	6014      	str	r4, [r2, #0]
 8004d82:	4628      	mov	r0, r5
 8004d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d88:	f000 b8dc 	b.w	8004f44 <__malloc_unlock>
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	d908      	bls.n	8004da2 <_free_r+0x42>
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	1821      	adds	r1, r4, r0
 8004d94:	428b      	cmp	r3, r1
 8004d96:	bf01      	itttt	eq
 8004d98:	6819      	ldreq	r1, [r3, #0]
 8004d9a:	685b      	ldreq	r3, [r3, #4]
 8004d9c:	1809      	addeq	r1, r1, r0
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	e7ed      	b.n	8004d7e <_free_r+0x1e>
 8004da2:	461a      	mov	r2, r3
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	b10b      	cbz	r3, 8004dac <_free_r+0x4c>
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d9fa      	bls.n	8004da2 <_free_r+0x42>
 8004dac:	6811      	ldr	r1, [r2, #0]
 8004dae:	1850      	adds	r0, r2, r1
 8004db0:	42a0      	cmp	r0, r4
 8004db2:	d10b      	bne.n	8004dcc <_free_r+0x6c>
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	4401      	add	r1, r0
 8004db8:	1850      	adds	r0, r2, r1
 8004dba:	4283      	cmp	r3, r0
 8004dbc:	6011      	str	r1, [r2, #0]
 8004dbe:	d1e0      	bne.n	8004d82 <_free_r+0x22>
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	6053      	str	r3, [r2, #4]
 8004dc6:	4408      	add	r0, r1
 8004dc8:	6010      	str	r0, [r2, #0]
 8004dca:	e7da      	b.n	8004d82 <_free_r+0x22>
 8004dcc:	d902      	bls.n	8004dd4 <_free_r+0x74>
 8004dce:	230c      	movs	r3, #12
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	e7d6      	b.n	8004d82 <_free_r+0x22>
 8004dd4:	6820      	ldr	r0, [r4, #0]
 8004dd6:	1821      	adds	r1, r4, r0
 8004dd8:	428b      	cmp	r3, r1
 8004dda:	bf04      	itt	eq
 8004ddc:	6819      	ldreq	r1, [r3, #0]
 8004dde:	685b      	ldreq	r3, [r3, #4]
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	bf04      	itt	eq
 8004de4:	1809      	addeq	r1, r1, r0
 8004de6:	6021      	streq	r1, [r4, #0]
 8004de8:	6054      	str	r4, [r2, #4]
 8004dea:	e7ca      	b.n	8004d82 <_free_r+0x22>
 8004dec:	bd38      	pop	{r3, r4, r5, pc}
 8004dee:	bf00      	nop
 8004df0:	200002dc 	.word	0x200002dc

08004df4 <sbrk_aligned>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4e0f      	ldr	r6, [pc, #60]	@ (8004e34 <sbrk_aligned+0x40>)
 8004df8:	460c      	mov	r4, r1
 8004dfa:	6831      	ldr	r1, [r6, #0]
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	b911      	cbnz	r1, 8004e06 <sbrk_aligned+0x12>
 8004e00:	f000 fba6 	bl	8005550 <_sbrk_r>
 8004e04:	6030      	str	r0, [r6, #0]
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 fba1 	bl	8005550 <_sbrk_r>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	d103      	bne.n	8004e1a <sbrk_aligned+0x26>
 8004e12:	f04f 34ff 	mov.w	r4, #4294967295
 8004e16:	4620      	mov	r0, r4
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
 8004e1a:	1cc4      	adds	r4, r0, #3
 8004e1c:	f024 0403 	bic.w	r4, r4, #3
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	d0f8      	beq.n	8004e16 <sbrk_aligned+0x22>
 8004e24:	1a21      	subs	r1, r4, r0
 8004e26:	4628      	mov	r0, r5
 8004e28:	f000 fb92 	bl	8005550 <_sbrk_r>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d1f2      	bne.n	8004e16 <sbrk_aligned+0x22>
 8004e30:	e7ef      	b.n	8004e12 <sbrk_aligned+0x1e>
 8004e32:	bf00      	nop
 8004e34:	200002d8 	.word	0x200002d8

08004e38 <_malloc_r>:
 8004e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e3c:	1ccd      	adds	r5, r1, #3
 8004e3e:	f025 0503 	bic.w	r5, r5, #3
 8004e42:	3508      	adds	r5, #8
 8004e44:	2d0c      	cmp	r5, #12
 8004e46:	bf38      	it	cc
 8004e48:	250c      	movcc	r5, #12
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	db01      	blt.n	8004e54 <_malloc_r+0x1c>
 8004e50:	42a9      	cmp	r1, r5
 8004e52:	d904      	bls.n	8004e5e <_malloc_r+0x26>
 8004e54:	230c      	movs	r3, #12
 8004e56:	6033      	str	r3, [r6, #0]
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f34 <_malloc_r+0xfc>
 8004e62:	f000 f869 	bl	8004f38 <__malloc_lock>
 8004e66:	f8d8 3000 	ldr.w	r3, [r8]
 8004e6a:	461c      	mov	r4, r3
 8004e6c:	bb44      	cbnz	r4, 8004ec0 <_malloc_r+0x88>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff ffbf 	bl	8004df4 <sbrk_aligned>
 8004e76:	1c43      	adds	r3, r0, #1
 8004e78:	4604      	mov	r4, r0
 8004e7a:	d158      	bne.n	8004f2e <_malloc_r+0xf6>
 8004e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e80:	4627      	mov	r7, r4
 8004e82:	2f00      	cmp	r7, #0
 8004e84:	d143      	bne.n	8004f0e <_malloc_r+0xd6>
 8004e86:	2c00      	cmp	r4, #0
 8004e88:	d04b      	beq.n	8004f22 <_malloc_r+0xea>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	4630      	mov	r0, r6
 8004e90:	eb04 0903 	add.w	r9, r4, r3
 8004e94:	f000 fb5c 	bl	8005550 <_sbrk_r>
 8004e98:	4581      	cmp	r9, r0
 8004e9a:	d142      	bne.n	8004f22 <_malloc_r+0xea>
 8004e9c:	6821      	ldr	r1, [r4, #0]
 8004e9e:	1a6d      	subs	r5, r5, r1
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff ffa6 	bl	8004df4 <sbrk_aligned>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d03a      	beq.n	8004f22 <_malloc_r+0xea>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	442b      	add	r3, r5
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	bb62      	cbnz	r2, 8004f14 <_malloc_r+0xdc>
 8004eba:	f8c8 7000 	str.w	r7, [r8]
 8004ebe:	e00f      	b.n	8004ee0 <_malloc_r+0xa8>
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	1b52      	subs	r2, r2, r5
 8004ec4:	d420      	bmi.n	8004f08 <_malloc_r+0xd0>
 8004ec6:	2a0b      	cmp	r2, #11
 8004ec8:	d917      	bls.n	8004efa <_malloc_r+0xc2>
 8004eca:	1961      	adds	r1, r4, r5
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	6025      	str	r5, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	6059      	strne	r1, [r3, #4]
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	bf08      	it	eq
 8004ed8:	f8c8 1000 	streq.w	r1, [r8]
 8004edc:	5162      	str	r2, [r4, r5]
 8004ede:	604b      	str	r3, [r1, #4]
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f82f 	bl	8004f44 <__malloc_unlock>
 8004ee6:	f104 000b 	add.w	r0, r4, #11
 8004eea:	1d23      	adds	r3, r4, #4
 8004eec:	f020 0007 	bic.w	r0, r0, #7
 8004ef0:	1ac2      	subs	r2, r0, r3
 8004ef2:	bf1c      	itt	ne
 8004ef4:	1a1b      	subne	r3, r3, r0
 8004ef6:	50a3      	strne	r3, [r4, r2]
 8004ef8:	e7af      	b.n	8004e5a <_malloc_r+0x22>
 8004efa:	6862      	ldr	r2, [r4, #4]
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	bf0c      	ite	eq
 8004f00:	f8c8 2000 	streq.w	r2, [r8]
 8004f04:	605a      	strne	r2, [r3, #4]
 8004f06:	e7eb      	b.n	8004ee0 <_malloc_r+0xa8>
 8004f08:	4623      	mov	r3, r4
 8004f0a:	6864      	ldr	r4, [r4, #4]
 8004f0c:	e7ae      	b.n	8004e6c <_malloc_r+0x34>
 8004f0e:	463c      	mov	r4, r7
 8004f10:	687f      	ldr	r7, [r7, #4]
 8004f12:	e7b6      	b.n	8004e82 <_malloc_r+0x4a>
 8004f14:	461a      	mov	r2, r3
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d1fb      	bne.n	8004f14 <_malloc_r+0xdc>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6053      	str	r3, [r2, #4]
 8004f20:	e7de      	b.n	8004ee0 <_malloc_r+0xa8>
 8004f22:	230c      	movs	r3, #12
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 f80c 	bl	8004f44 <__malloc_unlock>
 8004f2c:	e794      	b.n	8004e58 <_malloc_r+0x20>
 8004f2e:	6005      	str	r5, [r0, #0]
 8004f30:	e7d6      	b.n	8004ee0 <_malloc_r+0xa8>
 8004f32:	bf00      	nop
 8004f34:	200002dc 	.word	0x200002dc

08004f38 <__malloc_lock>:
 8004f38:	4801      	ldr	r0, [pc, #4]	@ (8004f40 <__malloc_lock+0x8>)
 8004f3a:	f7ff bf0f 	b.w	8004d5c <__retarget_lock_acquire_recursive>
 8004f3e:	bf00      	nop
 8004f40:	200002d4 	.word	0x200002d4

08004f44 <__malloc_unlock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	@ (8004f4c <__malloc_unlock+0x8>)
 8004f46:	f7ff bf0a 	b.w	8004d5e <__retarget_lock_release_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	200002d4 	.word	0x200002d4

08004f50 <__ssputs_r>:
 8004f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	688e      	ldr	r6, [r1, #8]
 8004f56:	461f      	mov	r7, r3
 8004f58:	42be      	cmp	r6, r7
 8004f5a:	680b      	ldr	r3, [r1, #0]
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	4690      	mov	r8, r2
 8004f62:	d82d      	bhi.n	8004fc0 <__ssputs_r+0x70>
 8004f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f6c:	d026      	beq.n	8004fbc <__ssputs_r+0x6c>
 8004f6e:	6965      	ldr	r5, [r4, #20]
 8004f70:	6909      	ldr	r1, [r1, #16]
 8004f72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f76:	eba3 0901 	sub.w	r9, r3, r1
 8004f7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f7e:	1c7b      	adds	r3, r7, #1
 8004f80:	444b      	add	r3, r9
 8004f82:	106d      	asrs	r5, r5, #1
 8004f84:	429d      	cmp	r5, r3
 8004f86:	bf38      	it	cc
 8004f88:	461d      	movcc	r5, r3
 8004f8a:	0553      	lsls	r3, r2, #21
 8004f8c:	d527      	bpl.n	8004fde <__ssputs_r+0x8e>
 8004f8e:	4629      	mov	r1, r5
 8004f90:	f7ff ff52 	bl	8004e38 <_malloc_r>
 8004f94:	4606      	mov	r6, r0
 8004f96:	b360      	cbz	r0, 8004ff2 <__ssputs_r+0xa2>
 8004f98:	6921      	ldr	r1, [r4, #16]
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	f000 fae8 	bl	8005570 <memcpy>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	6126      	str	r6, [r4, #16]
 8004fae:	6165      	str	r5, [r4, #20]
 8004fb0:	444e      	add	r6, r9
 8004fb2:	eba5 0509 	sub.w	r5, r5, r9
 8004fb6:	6026      	str	r6, [r4, #0]
 8004fb8:	60a5      	str	r5, [r4, #8]
 8004fba:	463e      	mov	r6, r7
 8004fbc:	42be      	cmp	r6, r7
 8004fbe:	d900      	bls.n	8004fc2 <__ssputs_r+0x72>
 8004fc0:	463e      	mov	r6, r7
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	4632      	mov	r2, r6
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	f000 faa8 	bl	800551c <memmove>
 8004fcc:	68a3      	ldr	r3, [r4, #8]
 8004fce:	1b9b      	subs	r3, r3, r6
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	4433      	add	r3, r6
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fde:	462a      	mov	r2, r5
 8004fe0:	f000 fad4 	bl	800558c <_realloc_r>
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d1e0      	bne.n	8004fac <__ssputs_r+0x5c>
 8004fea:	6921      	ldr	r1, [r4, #16]
 8004fec:	4650      	mov	r0, sl
 8004fee:	f7ff feb7 	bl	8004d60 <_free_r>
 8004ff2:	230c      	movs	r3, #12
 8004ff4:	f8ca 3000 	str.w	r3, [sl]
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	e7e9      	b.n	8004fda <__ssputs_r+0x8a>
	...

08005008 <_svfiprintf_r>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	4698      	mov	r8, r3
 800500e:	898b      	ldrh	r3, [r1, #12]
 8005010:	061b      	lsls	r3, r3, #24
 8005012:	b09d      	sub	sp, #116	@ 0x74
 8005014:	4607      	mov	r7, r0
 8005016:	460d      	mov	r5, r1
 8005018:	4614      	mov	r4, r2
 800501a:	d510      	bpl.n	800503e <_svfiprintf_r+0x36>
 800501c:	690b      	ldr	r3, [r1, #16]
 800501e:	b973      	cbnz	r3, 800503e <_svfiprintf_r+0x36>
 8005020:	2140      	movs	r1, #64	@ 0x40
 8005022:	f7ff ff09 	bl	8004e38 <_malloc_r>
 8005026:	6028      	str	r0, [r5, #0]
 8005028:	6128      	str	r0, [r5, #16]
 800502a:	b930      	cbnz	r0, 800503a <_svfiprintf_r+0x32>
 800502c:	230c      	movs	r3, #12
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	b01d      	add	sp, #116	@ 0x74
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503a:	2340      	movs	r3, #64	@ 0x40
 800503c:	616b      	str	r3, [r5, #20]
 800503e:	2300      	movs	r3, #0
 8005040:	9309      	str	r3, [sp, #36]	@ 0x24
 8005042:	2320      	movs	r3, #32
 8005044:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005048:	f8cd 800c 	str.w	r8, [sp, #12]
 800504c:	2330      	movs	r3, #48	@ 0x30
 800504e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051ec <_svfiprintf_r+0x1e4>
 8005052:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005056:	f04f 0901 	mov.w	r9, #1
 800505a:	4623      	mov	r3, r4
 800505c:	469a      	mov	sl, r3
 800505e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005062:	b10a      	cbz	r2, 8005068 <_svfiprintf_r+0x60>
 8005064:	2a25      	cmp	r2, #37	@ 0x25
 8005066:	d1f9      	bne.n	800505c <_svfiprintf_r+0x54>
 8005068:	ebba 0b04 	subs.w	fp, sl, r4
 800506c:	d00b      	beq.n	8005086 <_svfiprintf_r+0x7e>
 800506e:	465b      	mov	r3, fp
 8005070:	4622      	mov	r2, r4
 8005072:	4629      	mov	r1, r5
 8005074:	4638      	mov	r0, r7
 8005076:	f7ff ff6b 	bl	8004f50 <__ssputs_r>
 800507a:	3001      	adds	r0, #1
 800507c:	f000 80a7 	beq.w	80051ce <_svfiprintf_r+0x1c6>
 8005080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005082:	445a      	add	r2, fp
 8005084:	9209      	str	r2, [sp, #36]	@ 0x24
 8005086:	f89a 3000 	ldrb.w	r3, [sl]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 809f 	beq.w	80051ce <_svfiprintf_r+0x1c6>
 8005090:	2300      	movs	r3, #0
 8005092:	f04f 32ff 	mov.w	r2, #4294967295
 8005096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800509a:	f10a 0a01 	add.w	sl, sl, #1
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	9307      	str	r3, [sp, #28]
 80050a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80050a8:	4654      	mov	r4, sl
 80050aa:	2205      	movs	r2, #5
 80050ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b0:	484e      	ldr	r0, [pc, #312]	@ (80051ec <_svfiprintf_r+0x1e4>)
 80050b2:	f7fb f89d 	bl	80001f0 <memchr>
 80050b6:	9a04      	ldr	r2, [sp, #16]
 80050b8:	b9d8      	cbnz	r0, 80050f2 <_svfiprintf_r+0xea>
 80050ba:	06d0      	lsls	r0, r2, #27
 80050bc:	bf44      	itt	mi
 80050be:	2320      	movmi	r3, #32
 80050c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050c4:	0711      	lsls	r1, r2, #28
 80050c6:	bf44      	itt	mi
 80050c8:	232b      	movmi	r3, #43	@ 0x2b
 80050ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ce:	f89a 3000 	ldrb.w	r3, [sl]
 80050d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d4:	d015      	beq.n	8005102 <_svfiprintf_r+0xfa>
 80050d6:	9a07      	ldr	r2, [sp, #28]
 80050d8:	4654      	mov	r4, sl
 80050da:	2000      	movs	r0, #0
 80050dc:	f04f 0c0a 	mov.w	ip, #10
 80050e0:	4621      	mov	r1, r4
 80050e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e6:	3b30      	subs	r3, #48	@ 0x30
 80050e8:	2b09      	cmp	r3, #9
 80050ea:	d94b      	bls.n	8005184 <_svfiprintf_r+0x17c>
 80050ec:	b1b0      	cbz	r0, 800511c <_svfiprintf_r+0x114>
 80050ee:	9207      	str	r2, [sp, #28]
 80050f0:	e014      	b.n	800511c <_svfiprintf_r+0x114>
 80050f2:	eba0 0308 	sub.w	r3, r0, r8
 80050f6:	fa09 f303 	lsl.w	r3, r9, r3
 80050fa:	4313      	orrs	r3, r2
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	46a2      	mov	sl, r4
 8005100:	e7d2      	b.n	80050a8 <_svfiprintf_r+0xa0>
 8005102:	9b03      	ldr	r3, [sp, #12]
 8005104:	1d19      	adds	r1, r3, #4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	9103      	str	r1, [sp, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfbb      	ittet	lt
 800510e:	425b      	neglt	r3, r3
 8005110:	f042 0202 	orrlt.w	r2, r2, #2
 8005114:	9307      	strge	r3, [sp, #28]
 8005116:	9307      	strlt	r3, [sp, #28]
 8005118:	bfb8      	it	lt
 800511a:	9204      	strlt	r2, [sp, #16]
 800511c:	7823      	ldrb	r3, [r4, #0]
 800511e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005120:	d10a      	bne.n	8005138 <_svfiprintf_r+0x130>
 8005122:	7863      	ldrb	r3, [r4, #1]
 8005124:	2b2a      	cmp	r3, #42	@ 0x2a
 8005126:	d132      	bne.n	800518e <_svfiprintf_r+0x186>
 8005128:	9b03      	ldr	r3, [sp, #12]
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	9203      	str	r2, [sp, #12]
 8005130:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005134:	3402      	adds	r4, #2
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051fc <_svfiprintf_r+0x1f4>
 800513c:	7821      	ldrb	r1, [r4, #0]
 800513e:	2203      	movs	r2, #3
 8005140:	4650      	mov	r0, sl
 8005142:	f7fb f855 	bl	80001f0 <memchr>
 8005146:	b138      	cbz	r0, 8005158 <_svfiprintf_r+0x150>
 8005148:	9b04      	ldr	r3, [sp, #16]
 800514a:	eba0 000a 	sub.w	r0, r0, sl
 800514e:	2240      	movs	r2, #64	@ 0x40
 8005150:	4082      	lsls	r2, r0
 8005152:	4313      	orrs	r3, r2
 8005154:	3401      	adds	r4, #1
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515c:	4824      	ldr	r0, [pc, #144]	@ (80051f0 <_svfiprintf_r+0x1e8>)
 800515e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005162:	2206      	movs	r2, #6
 8005164:	f7fb f844 	bl	80001f0 <memchr>
 8005168:	2800      	cmp	r0, #0
 800516a:	d036      	beq.n	80051da <_svfiprintf_r+0x1d2>
 800516c:	4b21      	ldr	r3, [pc, #132]	@ (80051f4 <_svfiprintf_r+0x1ec>)
 800516e:	bb1b      	cbnz	r3, 80051b8 <_svfiprintf_r+0x1b0>
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	3307      	adds	r3, #7
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	3308      	adds	r3, #8
 800517a:	9303      	str	r3, [sp, #12]
 800517c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800517e:	4433      	add	r3, r6
 8005180:	9309      	str	r3, [sp, #36]	@ 0x24
 8005182:	e76a      	b.n	800505a <_svfiprintf_r+0x52>
 8005184:	fb0c 3202 	mla	r2, ip, r2, r3
 8005188:	460c      	mov	r4, r1
 800518a:	2001      	movs	r0, #1
 800518c:	e7a8      	b.n	80050e0 <_svfiprintf_r+0xd8>
 800518e:	2300      	movs	r3, #0
 8005190:	3401      	adds	r4, #1
 8005192:	9305      	str	r3, [sp, #20]
 8005194:	4619      	mov	r1, r3
 8005196:	f04f 0c0a 	mov.w	ip, #10
 800519a:	4620      	mov	r0, r4
 800519c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a0:	3a30      	subs	r2, #48	@ 0x30
 80051a2:	2a09      	cmp	r2, #9
 80051a4:	d903      	bls.n	80051ae <_svfiprintf_r+0x1a6>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0c6      	beq.n	8005138 <_svfiprintf_r+0x130>
 80051aa:	9105      	str	r1, [sp, #20]
 80051ac:	e7c4      	b.n	8005138 <_svfiprintf_r+0x130>
 80051ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80051b2:	4604      	mov	r4, r0
 80051b4:	2301      	movs	r3, #1
 80051b6:	e7f0      	b.n	800519a <_svfiprintf_r+0x192>
 80051b8:	ab03      	add	r3, sp, #12
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	462a      	mov	r2, r5
 80051be:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <_svfiprintf_r+0x1f0>)
 80051c0:	a904      	add	r1, sp, #16
 80051c2:	4638      	mov	r0, r7
 80051c4:	f3af 8000 	nop.w
 80051c8:	1c42      	adds	r2, r0, #1
 80051ca:	4606      	mov	r6, r0
 80051cc:	d1d6      	bne.n	800517c <_svfiprintf_r+0x174>
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	065b      	lsls	r3, r3, #25
 80051d2:	f53f af2d 	bmi.w	8005030 <_svfiprintf_r+0x28>
 80051d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051d8:	e72c      	b.n	8005034 <_svfiprintf_r+0x2c>
 80051da:	ab03      	add	r3, sp, #12
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	462a      	mov	r2, r5
 80051e0:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <_svfiprintf_r+0x1f0>)
 80051e2:	a904      	add	r1, sp, #16
 80051e4:	4638      	mov	r0, r7
 80051e6:	f000 f879 	bl	80052dc <_printf_i>
 80051ea:	e7ed      	b.n	80051c8 <_svfiprintf_r+0x1c0>
 80051ec:	08005772 	.word	0x08005772
 80051f0:	0800577c 	.word	0x0800577c
 80051f4:	00000000 	.word	0x00000000
 80051f8:	08004f51 	.word	0x08004f51
 80051fc:	08005778 	.word	0x08005778

08005200 <_printf_common>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	4616      	mov	r6, r2
 8005206:	4698      	mov	r8, r3
 8005208:	688a      	ldr	r2, [r1, #8]
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005210:	4293      	cmp	r3, r2
 8005212:	bfb8      	it	lt
 8005214:	4613      	movlt	r3, r2
 8005216:	6033      	str	r3, [r6, #0]
 8005218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800521c:	4607      	mov	r7, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b10a      	cbz	r2, 8005226 <_printf_common+0x26>
 8005222:	3301      	adds	r3, #1
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	6833      	ldrmi	r3, [r6, #0]
 800522e:	3302      	addmi	r3, #2
 8005230:	6033      	strmi	r3, [r6, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	f015 0506 	ands.w	r5, r5, #6
 8005238:	d106      	bne.n	8005248 <_printf_common+0x48>
 800523a:	f104 0a19 	add.w	sl, r4, #25
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	6832      	ldr	r2, [r6, #0]
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	42ab      	cmp	r3, r5
 8005246:	dc26      	bgt.n	8005296 <_printf_common+0x96>
 8005248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	3b00      	subs	r3, #0
 8005250:	bf18      	it	ne
 8005252:	2301      	movne	r3, #1
 8005254:	0692      	lsls	r2, r2, #26
 8005256:	d42b      	bmi.n	80052b0 <_printf_common+0xb0>
 8005258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800525c:	4641      	mov	r1, r8
 800525e:	4638      	mov	r0, r7
 8005260:	47c8      	blx	r9
 8005262:	3001      	adds	r0, #1
 8005264:	d01e      	beq.n	80052a4 <_printf_common+0xa4>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf02      	ittt	eq
 8005272:	68e5      	ldreq	r5, [r4, #12]
 8005274:	6833      	ldreq	r3, [r6, #0]
 8005276:	1aed      	subeq	r5, r5, r3
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	bf0c      	ite	eq
 800527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005280:	2500      	movne	r5, #0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfc4      	itt	gt
 8005286:	1a9b      	subgt	r3, r3, r2
 8005288:	18ed      	addgt	r5, r5, r3
 800528a:	2600      	movs	r6, #0
 800528c:	341a      	adds	r4, #26
 800528e:	42b5      	cmp	r5, r6
 8005290:	d11a      	bne.n	80052c8 <_printf_common+0xc8>
 8005292:	2000      	movs	r0, #0
 8005294:	e008      	b.n	80052a8 <_printf_common+0xa8>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4641      	mov	r1, r8
 800529c:	4638      	mov	r0, r7
 800529e:	47c8      	blx	r9
 80052a0:	3001      	adds	r0, #1
 80052a2:	d103      	bne.n	80052ac <_printf_common+0xac>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	3501      	adds	r5, #1
 80052ae:	e7c6      	b.n	800523e <_printf_common+0x3e>
 80052b0:	18e1      	adds	r1, r4, r3
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	2030      	movs	r0, #48	@ 0x30
 80052b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ba:	4422      	add	r2, r4
 80052bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052c4:	3302      	adds	r3, #2
 80052c6:	e7c7      	b.n	8005258 <_printf_common+0x58>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4622      	mov	r2, r4
 80052cc:	4641      	mov	r1, r8
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c8      	blx	r9
 80052d2:	3001      	adds	r0, #1
 80052d4:	d0e6      	beq.n	80052a4 <_printf_common+0xa4>
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7d9      	b.n	800528e <_printf_common+0x8e>
	...

080052dc <_printf_i>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	7e0f      	ldrb	r7, [r1, #24]
 80052e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052e4:	2f78      	cmp	r7, #120	@ 0x78
 80052e6:	4691      	mov	r9, r2
 80052e8:	4680      	mov	r8, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	469a      	mov	sl, r3
 80052ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052f2:	d807      	bhi.n	8005304 <_printf_i+0x28>
 80052f4:	2f62      	cmp	r7, #98	@ 0x62
 80052f6:	d80a      	bhi.n	800530e <_printf_i+0x32>
 80052f8:	2f00      	cmp	r7, #0
 80052fa:	f000 80d2 	beq.w	80054a2 <_printf_i+0x1c6>
 80052fe:	2f58      	cmp	r7, #88	@ 0x58
 8005300:	f000 80b9 	beq.w	8005476 <_printf_i+0x19a>
 8005304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800530c:	e03a      	b.n	8005384 <_printf_i+0xa8>
 800530e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005312:	2b15      	cmp	r3, #21
 8005314:	d8f6      	bhi.n	8005304 <_printf_i+0x28>
 8005316:	a101      	add	r1, pc, #4	@ (adr r1, 800531c <_printf_i+0x40>)
 8005318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800531c:	08005375 	.word	0x08005375
 8005320:	08005389 	.word	0x08005389
 8005324:	08005305 	.word	0x08005305
 8005328:	08005305 	.word	0x08005305
 800532c:	08005305 	.word	0x08005305
 8005330:	08005305 	.word	0x08005305
 8005334:	08005389 	.word	0x08005389
 8005338:	08005305 	.word	0x08005305
 800533c:	08005305 	.word	0x08005305
 8005340:	08005305 	.word	0x08005305
 8005344:	08005305 	.word	0x08005305
 8005348:	08005489 	.word	0x08005489
 800534c:	080053b3 	.word	0x080053b3
 8005350:	08005443 	.word	0x08005443
 8005354:	08005305 	.word	0x08005305
 8005358:	08005305 	.word	0x08005305
 800535c:	080054ab 	.word	0x080054ab
 8005360:	08005305 	.word	0x08005305
 8005364:	080053b3 	.word	0x080053b3
 8005368:	08005305 	.word	0x08005305
 800536c:	08005305 	.word	0x08005305
 8005370:	0800544b 	.word	0x0800544b
 8005374:	6833      	ldr	r3, [r6, #0]
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6032      	str	r2, [r6, #0]
 800537c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005384:	2301      	movs	r3, #1
 8005386:	e09d      	b.n	80054c4 <_printf_i+0x1e8>
 8005388:	6833      	ldr	r3, [r6, #0]
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	1d19      	adds	r1, r3, #4
 800538e:	6031      	str	r1, [r6, #0]
 8005390:	0606      	lsls	r6, r0, #24
 8005392:	d501      	bpl.n	8005398 <_printf_i+0xbc>
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	e003      	b.n	80053a0 <_printf_i+0xc4>
 8005398:	0645      	lsls	r5, r0, #25
 800539a:	d5fb      	bpl.n	8005394 <_printf_i+0xb8>
 800539c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	da03      	bge.n	80053ac <_printf_i+0xd0>
 80053a4:	232d      	movs	r3, #45	@ 0x2d
 80053a6:	426d      	negs	r5, r5
 80053a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ac:	4859      	ldr	r0, [pc, #356]	@ (8005514 <_printf_i+0x238>)
 80053ae:	230a      	movs	r3, #10
 80053b0:	e011      	b.n	80053d6 <_printf_i+0xfa>
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	0608      	lsls	r0, r1, #24
 80053b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053bc:	d402      	bmi.n	80053c4 <_printf_i+0xe8>
 80053be:	0649      	lsls	r1, r1, #25
 80053c0:	bf48      	it	mi
 80053c2:	b2ad      	uxthmi	r5, r5
 80053c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053c6:	4853      	ldr	r0, [pc, #332]	@ (8005514 <_printf_i+0x238>)
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	bf14      	ite	ne
 80053cc:	230a      	movne	r3, #10
 80053ce:	2308      	moveq	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053d6:	6866      	ldr	r6, [r4, #4]
 80053d8:	60a6      	str	r6, [r4, #8]
 80053da:	2e00      	cmp	r6, #0
 80053dc:	bfa2      	ittt	ge
 80053de:	6821      	ldrge	r1, [r4, #0]
 80053e0:	f021 0104 	bicge.w	r1, r1, #4
 80053e4:	6021      	strge	r1, [r4, #0]
 80053e6:	b90d      	cbnz	r5, 80053ec <_printf_i+0x110>
 80053e8:	2e00      	cmp	r6, #0
 80053ea:	d04b      	beq.n	8005484 <_printf_i+0x1a8>
 80053ec:	4616      	mov	r6, r2
 80053ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80053f2:	fb03 5711 	mls	r7, r3, r1, r5
 80053f6:	5dc7      	ldrb	r7, [r0, r7]
 80053f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053fc:	462f      	mov	r7, r5
 80053fe:	42bb      	cmp	r3, r7
 8005400:	460d      	mov	r5, r1
 8005402:	d9f4      	bls.n	80053ee <_printf_i+0x112>
 8005404:	2b08      	cmp	r3, #8
 8005406:	d10b      	bne.n	8005420 <_printf_i+0x144>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	07df      	lsls	r7, r3, #31
 800540c:	d508      	bpl.n	8005420 <_printf_i+0x144>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	6861      	ldr	r1, [r4, #4]
 8005412:	4299      	cmp	r1, r3
 8005414:	bfde      	ittt	le
 8005416:	2330      	movle	r3, #48	@ 0x30
 8005418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800541c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005420:	1b92      	subs	r2, r2, r6
 8005422:	6122      	str	r2, [r4, #16]
 8005424:	f8cd a000 	str.w	sl, [sp]
 8005428:	464b      	mov	r3, r9
 800542a:	aa03      	add	r2, sp, #12
 800542c:	4621      	mov	r1, r4
 800542e:	4640      	mov	r0, r8
 8005430:	f7ff fee6 	bl	8005200 <_printf_common>
 8005434:	3001      	adds	r0, #1
 8005436:	d14a      	bne.n	80054ce <_printf_i+0x1f2>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	b004      	add	sp, #16
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f043 0320 	orr.w	r3, r3, #32
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	4833      	ldr	r0, [pc, #204]	@ (8005518 <_printf_i+0x23c>)
 800544c:	2778      	movs	r7, #120	@ 0x78
 800544e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	6831      	ldr	r1, [r6, #0]
 8005456:	061f      	lsls	r7, r3, #24
 8005458:	f851 5b04 	ldr.w	r5, [r1], #4
 800545c:	d402      	bmi.n	8005464 <_printf_i+0x188>
 800545e:	065f      	lsls	r7, r3, #25
 8005460:	bf48      	it	mi
 8005462:	b2ad      	uxthmi	r5, r5
 8005464:	6031      	str	r1, [r6, #0]
 8005466:	07d9      	lsls	r1, r3, #31
 8005468:	bf44      	itt	mi
 800546a:	f043 0320 	orrmi.w	r3, r3, #32
 800546e:	6023      	strmi	r3, [r4, #0]
 8005470:	b11d      	cbz	r5, 800547a <_printf_i+0x19e>
 8005472:	2310      	movs	r3, #16
 8005474:	e7ac      	b.n	80053d0 <_printf_i+0xf4>
 8005476:	4827      	ldr	r0, [pc, #156]	@ (8005514 <_printf_i+0x238>)
 8005478:	e7e9      	b.n	800544e <_printf_i+0x172>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f023 0320 	bic.w	r3, r3, #32
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	e7f6      	b.n	8005472 <_printf_i+0x196>
 8005484:	4616      	mov	r6, r2
 8005486:	e7bd      	b.n	8005404 <_printf_i+0x128>
 8005488:	6833      	ldr	r3, [r6, #0]
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	6961      	ldr	r1, [r4, #20]
 800548e:	1d18      	adds	r0, r3, #4
 8005490:	6030      	str	r0, [r6, #0]
 8005492:	062e      	lsls	r6, r5, #24
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	d501      	bpl.n	800549c <_printf_i+0x1c0>
 8005498:	6019      	str	r1, [r3, #0]
 800549a:	e002      	b.n	80054a2 <_printf_i+0x1c6>
 800549c:	0668      	lsls	r0, r5, #25
 800549e:	d5fb      	bpl.n	8005498 <_printf_i+0x1bc>
 80054a0:	8019      	strh	r1, [r3, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	4616      	mov	r6, r2
 80054a8:	e7bc      	b.n	8005424 <_printf_i+0x148>
 80054aa:	6833      	ldr	r3, [r6, #0]
 80054ac:	1d1a      	adds	r2, r3, #4
 80054ae:	6032      	str	r2, [r6, #0]
 80054b0:	681e      	ldr	r6, [r3, #0]
 80054b2:	6862      	ldr	r2, [r4, #4]
 80054b4:	2100      	movs	r1, #0
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7fa fe9a 	bl	80001f0 <memchr>
 80054bc:	b108      	cbz	r0, 80054c2 <_printf_i+0x1e6>
 80054be:	1b80      	subs	r0, r0, r6
 80054c0:	6060      	str	r0, [r4, #4]
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	2300      	movs	r3, #0
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054cc:	e7aa      	b.n	8005424 <_printf_i+0x148>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	4632      	mov	r2, r6
 80054d2:	4649      	mov	r1, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	47d0      	blx	sl
 80054d8:	3001      	adds	r0, #1
 80054da:	d0ad      	beq.n	8005438 <_printf_i+0x15c>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	079b      	lsls	r3, r3, #30
 80054e0:	d413      	bmi.n	800550a <_printf_i+0x22e>
 80054e2:	68e0      	ldr	r0, [r4, #12]
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	4298      	cmp	r0, r3
 80054e8:	bfb8      	it	lt
 80054ea:	4618      	movlt	r0, r3
 80054ec:	e7a6      	b.n	800543c <_printf_i+0x160>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4632      	mov	r2, r6
 80054f2:	4649      	mov	r1, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	47d0      	blx	sl
 80054f8:	3001      	adds	r0, #1
 80054fa:	d09d      	beq.n	8005438 <_printf_i+0x15c>
 80054fc:	3501      	adds	r5, #1
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	9903      	ldr	r1, [sp, #12]
 8005502:	1a5b      	subs	r3, r3, r1
 8005504:	42ab      	cmp	r3, r5
 8005506:	dcf2      	bgt.n	80054ee <_printf_i+0x212>
 8005508:	e7eb      	b.n	80054e2 <_printf_i+0x206>
 800550a:	2500      	movs	r5, #0
 800550c:	f104 0619 	add.w	r6, r4, #25
 8005510:	e7f5      	b.n	80054fe <_printf_i+0x222>
 8005512:	bf00      	nop
 8005514:	08005783 	.word	0x08005783
 8005518:	08005794 	.word	0x08005794

0800551c <memmove>:
 800551c:	4288      	cmp	r0, r1
 800551e:	b510      	push	{r4, lr}
 8005520:	eb01 0402 	add.w	r4, r1, r2
 8005524:	d902      	bls.n	800552c <memmove+0x10>
 8005526:	4284      	cmp	r4, r0
 8005528:	4623      	mov	r3, r4
 800552a:	d807      	bhi.n	800553c <memmove+0x20>
 800552c:	1e43      	subs	r3, r0, #1
 800552e:	42a1      	cmp	r1, r4
 8005530:	d008      	beq.n	8005544 <memmove+0x28>
 8005532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800553a:	e7f8      	b.n	800552e <memmove+0x12>
 800553c:	4402      	add	r2, r0
 800553e:	4601      	mov	r1, r0
 8005540:	428a      	cmp	r2, r1
 8005542:	d100      	bne.n	8005546 <memmove+0x2a>
 8005544:	bd10      	pop	{r4, pc}
 8005546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800554a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800554e:	e7f7      	b.n	8005540 <memmove+0x24>

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d06      	ldr	r5, [pc, #24]	@ (800556c <_sbrk_r+0x1c>)
 8005554:	2300      	movs	r3, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fb fe4c 	bl	80011f8 <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200002d0 	.word	0x200002d0

08005570 <memcpy>:
 8005570:	440a      	add	r2, r1
 8005572:	4291      	cmp	r1, r2
 8005574:	f100 33ff 	add.w	r3, r0, #4294967295
 8005578:	d100      	bne.n	800557c <memcpy+0xc>
 800557a:	4770      	bx	lr
 800557c:	b510      	push	{r4, lr}
 800557e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005586:	4291      	cmp	r1, r2
 8005588:	d1f9      	bne.n	800557e <memcpy+0xe>
 800558a:	bd10      	pop	{r4, pc}

0800558c <_realloc_r>:
 800558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	4680      	mov	r8, r0
 8005592:	4615      	mov	r5, r2
 8005594:	460c      	mov	r4, r1
 8005596:	b921      	cbnz	r1, 80055a2 <_realloc_r+0x16>
 8005598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800559c:	4611      	mov	r1, r2
 800559e:	f7ff bc4b 	b.w	8004e38 <_malloc_r>
 80055a2:	b92a      	cbnz	r2, 80055b0 <_realloc_r+0x24>
 80055a4:	f7ff fbdc 	bl	8004d60 <_free_r>
 80055a8:	2400      	movs	r4, #0
 80055aa:	4620      	mov	r0, r4
 80055ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b0:	f000 f81a 	bl	80055e8 <_malloc_usable_size_r>
 80055b4:	4285      	cmp	r5, r0
 80055b6:	4606      	mov	r6, r0
 80055b8:	d802      	bhi.n	80055c0 <_realloc_r+0x34>
 80055ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055be:	d8f4      	bhi.n	80055aa <_realloc_r+0x1e>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4640      	mov	r0, r8
 80055c4:	f7ff fc38 	bl	8004e38 <_malloc_r>
 80055c8:	4607      	mov	r7, r0
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d0ec      	beq.n	80055a8 <_realloc_r+0x1c>
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	462a      	mov	r2, r5
 80055d2:	4621      	mov	r1, r4
 80055d4:	bf28      	it	cs
 80055d6:	4632      	movcs	r2, r6
 80055d8:	f7ff ffca 	bl	8005570 <memcpy>
 80055dc:	4621      	mov	r1, r4
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff fbbe 	bl	8004d60 <_free_r>
 80055e4:	463c      	mov	r4, r7
 80055e6:	e7e0      	b.n	80055aa <_realloc_r+0x1e>

080055e8 <_malloc_usable_size_r>:
 80055e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ec:	1f18      	subs	r0, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bfbc      	itt	lt
 80055f2:	580b      	ldrlt	r3, [r1, r0]
 80055f4:	18c0      	addlt	r0, r0, r3
 80055f6:	4770      	bx	lr

080055f8 <_init>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr

08005604 <_fini>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr
